# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

interface MAGENTO_AggregationOptionInterface {
    "The number of items that match the aggregation option."
    count: Int
    "Aggregation option display label."
    label: String
    "The internal ID that represents the value of the option."
    value: String!
}

interface MAGENTO_CartAddressInterface {
    city: String!
    company: String
    country: MAGENTO_CartAddressCountry!
    firstname: String!
    lastname: String!
    postcode: String
    region: MAGENTO_CartAddressRegion
    street: [String]!
    telephone: String!
}

interface MAGENTO_CartItemInterface {
    id: String!
    prices: MAGENTO_CartItemPrices
    product: MAGENTO_ProductInterface!
    quantity: Float!
}

"CategoryInterface contains the full set of attributes that can be returned in a category search."
interface MAGENTO_CategoryInterface {
    available_sort_by: [String]
    "Breadcrumbs, parent categories info."
    breadcrumbs: [MAGENTO_Breadcrumb]
    """

    Relative canonical URL. This value is returned only if the system setting 'Use
    Canonical Link Meta Tag For Categories' is enabled
    """
    canonical_url: String
    children_count: String
    "Category CMS Block."
    cms_block: MAGENTO_CmsBlock
    "Timestamp indicating when the category was created."
    created_at: String
    custom_layout_update_file: String
    "The attribute to use for sorting."
    default_sort_by: String
    "An optional description of the category."
    description: String
    display_mode: String
    filter_price_range: Float
    "An ID that uniquely identifies the category."
    id: Int
    image: String
    include_in_menu: Int
    is_anchor: Int
    landing_page: Int
    "Indicates the depth of the category within the tree."
    level: Int
    meta_description: String
    meta_keywords: String
    meta_title: String
    "The display name of the category."
    name: String
    "Category Path."
    path: String
    "Category path in store."
    path_in_store: String
    "The position of the category relative to other categories at the same level in tree."
    position: Int
    """

    The number of products in the category that are marked as visible. By default,
    in complex products, parent products are visible, but their child products are not.
    """
    product_count: Int
    "The list of products assigned to the category."
    products(
        "Specifies which page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Specifies the maximum number of results to return at once. This attribute is optional."
        pageSize: Int = 20,
        "Specifies which attributes to sort on, and whether to return the results in ascending or descending order."
        sort: MAGENTO_ProductAttributeSortInput
    ): MAGENTO_CategoryProducts
    "Timestamp indicating when the category was updated."
    updated_at: String
    "The url key assigned to the category."
    url_key: String
    "The url path assigned to the category."
    url_path: String
    "The part of the category URL that is appended after the url key"
    url_suffix: String
}

"""

The CustomizableOptionInterface contains basic information about a customizable
option. It can be implemented by several types of configurable options.
"""
interface MAGENTO_CustomizableOptionInterface {
    "Option ID."
    option_id: Int
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
}

"CustomizableProductInterface contains information about customizable product options."
interface MAGENTO_CustomizableProductInterface {
    "An array of options for a customizable product."
    options: [MAGENTO_CustomizableOptionInterface]
}

interface MAGENTO_LayerFilterItemInterface {
    "Count of items by filter."
    items_count: Int @deprecated(reason : "Use AggregationOption.count instead.")
    "Filter label."
    label: String @deprecated(reason : "Use AggregationOption.label instead.")
    "Value for filter request variable to be used in query."
    value_string: String @deprecated(reason : "Use AggregationOption.value instead.")
}

"Contains basic information about a product image or video."
interface MAGENTO_MediaGalleryInterface {
    "Whether the image is hidden from view."
    disabled: Boolean
    "The label of the product image or video."
    label: String
    "The media item's position after it has been sorted."
    position: Int
    "The URL of the product image or video."
    url: String
}

"PhysicalProductInterface contains attributes specific to tangible products."
interface MAGENTO_PhysicalProductInterface {
    "The weight of the item, in units defined by the store."
    weight: Float
}

"""

The ProductInterface contains attributes that are common to all types of
products. Note that descriptions may not be available for custom and EAV attributes.
"""
interface MAGENTO_ProductInterface {
    activity: String
    "The attribute set assigned to the product."
    attribute_set_id: Int
    """

    Relative canonical URL. This value is returned only if the system setting 'Use
    Canonical Link Meta Tag For Products' is enabled
    """
    canonical_url: String
    "The categories assigned to a product."
    categories: [MAGENTO_CategoryInterface]
    category_gear: String
    climate: String
    collar: String
    color: String
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String
    "Crosssell Products"
    crosssell_products: [MAGENTO_ProductInterface]
    "Detailed information about the product. The value can include simple HTML tags."
    description: MAGENTO_ComplexTextValue
    eco_collection: Int
    erin_recommends: Int
    features_bags: String
    format: Int
    gender: String
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int
    "The relative path to the main image on the product page."
    image: MAGENTO_ProductImage
    "A number representing the product's manufacturer."
    manufacturer: Int
    material: String
    "An array of Media Gallery objects."
    media_gallery: [MAGENTO_MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MAGENTO_MediaGalleryEntry] @deprecated(reason : "Use product's `media_gallery` instead")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "The product name. Customers use this name to identify the product."
    name: String
    new: Int
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    pattern: String
    performance_fabric: Int
    "A ProductPrices object, indicating the price of an item."
    price: MAGENTO_ProductPrices @deprecated(reason : "Use price_range for product price information.")
    "A PriceRange object, indicating the range of prices for the product"
    price_range: MAGENTO_PriceRange!
    "An array of TierPrice objects."
    price_tiers: [MAGENTO_TierPrice]
    "An array of ProductLinks objects."
    product_links: [MAGENTO_ProductLinksInterface]
    "Related Products"
    related_products: [MAGENTO_ProductInterface]
    sale: Int
    "A short description of the product. Its use depends on the theme."
    short_description: MAGENTO_ComplexTextValue
    size: Int
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    sleeve: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: MAGENTO_ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String
    "The discounted price of the product."
    special_price: Float
    "The end date that a product has a special price."
    special_to_date: String
    "Stock status of the product"
    stock_status: MAGENTO_ProductStockStatus
    strap_bags: String
    style_bags: String
    style_bottom: String
    style_general: String
    "The file name of a swatch image"
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: MAGENTO_ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason : "Use price_tiers for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [MAGENTO_ProductTierPrices] @deprecated(reason : "Use price_tiers for product tier price information.")
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason : "Use __typename instead.")
    "Timestamp indicating when the product was updated."
    updated_at: String
    "Upsell Products"
    upsell_products: [MAGENTO_ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason : "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [MAGENTO_UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [MAGENTO_Website] @deprecated(reason : "The field should not be used on the storefront.")
}

"ProductLinks contains information about linked products, including the link type and product type of each item."
interface MAGENTO_ProductLinksInterface {
    "One of related, associated, upsell, or crosssell."
    link_type: String
    "The SKU of the linked product."
    linked_product_sku: String
    "The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable)."
    linked_product_type: String
    "The position within the list of product links."
    position: Int
    "The identifier of the linked product."
    sku: String
}

interface MAGENTO_SwatchDataInterface {
    "Value of swatch item (HEX color code, image link or textual value)"
    value: String
}

interface MAGENTO_SwatchLayerFilterItemInterface {
    "Data required to render swatch filter item"
    swatch_data: MAGENTO_SwatchData
}

"Node Interface"
interface Node {
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

type Directory implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason : "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason : "Use `birthTime` instead")
    blksize: Int
    blocks: Int
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    children: [Node!]!
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
}

type DirectoryConnection {
    distinct(field: DirectoryFieldsEnum!): [String!]!
    edges: [DirectoryEdge!]!
    group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
    nodes: [Directory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type DirectoryEdge {
    next: Directory
    node: Directory!
    previous: Directory
}

type DirectoryGroupConnection {
    edges: [DirectoryEdge!]!
    field: String!
    fieldValue: String
    nodes: [Directory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type File implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason : "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason : "Use `birthTime` instead")
    blksize: Int
    blocks: Int
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    childImageSharp: ImageSharp
    children: [Node!]!
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    "Copy file to static directory and return public url to it"
    publicURL: String
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
}

type FileConnection {
    distinct(field: FileFieldsEnum!): [String!]!
    edges: [FileEdge!]!
    group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
    nodes: [File!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type FileEdge {
    next: File
    node: File!
    previous: File
}

type FileGroupConnection {
    edges: [FileEdge!]!
    field: String!
    fieldValue: String
    nodes: [File!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphQLSource implements Node {
    children: [Node!]!
    fieldName: String
    id: ID!
    internal: Internal!
    parent: Node
    typeName: String
}

type GraphQLSourceConnection {
    distinct(field: GraphQLSourceFieldsEnum!): [String!]!
    edges: [GraphQLSourceEdge!]!
    group(field: GraphQLSourceFieldsEnum!, limit: Int, skip: Int): [GraphQLSourceGroupConnection!]!
    nodes: [GraphQLSource!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphQLSourceEdge {
    next: GraphQLSource
    node: GraphQLSource!
    previous: GraphQLSource
}

type GraphQLSourceGroupConnection {
    edges: [GraphQLSourceEdge!]!
    field: String!
    fieldValue: String
    nodes: [GraphQLSource!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharp implements Node {
    children: [Node!]!
    fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpFixed
    fluid(
        background: String = "rgba(0,0,0,1)",
        base64Width: Int,
        cropFocus: ImageCropFocus = ATTENTION,
        duotone: DuotoneGradient,
        fit: ImageFit = COVER,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        jpegQuality: Int,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        pngQuality: Int,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        "A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]"
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat = NO_CHANGE,
        toFormatBase64: ImageFormat = NO_CHANGE,
        traceSVG: Potrace,
        trim: Float = 0.0,
        webpQuality: Int
    ): ImageSharpFluid
    id: ID!
    internal: Internal!
    original: ImageSharpOriginal
    parent: Node
    resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpResize
    resolutions(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpResolutions @deprecated(reason : "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https://example.com/write-docs-and-fix-this-example-link")
    sizes(
        background: String = "rgba(0,0,0,1)",
        base64Width: Int,
        cropFocus: ImageCropFocus = ATTENTION,
        duotone: DuotoneGradient,
        fit: ImageFit = COVER,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        jpegQuality: Int,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        pngQuality: Int,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        "A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]"
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat = NO_CHANGE,
        toFormatBase64: ImageFormat = NO_CHANGE,
        traceSVG: Potrace,
        trim: Float = 0.0,
        webpQuality: Int
    ): ImageSharpSizes @deprecated(reason : "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https://example.com/write-docs-and-fix-this-example-link")
}

type ImageSharpConnection {
    distinct(field: ImageSharpFieldsEnum!): [String!]!
    edges: [ImageSharpEdge!]!
    group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharpEdge {
    next: ImageSharp
    node: ImageSharp!
    previous: ImageSharp
}

type ImageSharpFixed {
    aspectRatio: Float
    base64: String
    height: Float!
    originalName: String
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float!
}

type ImageSharpFluid {
    aspectRatio: Float!
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int!
    presentationWidth: Int!
    sizes: String!
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type ImageSharpGroupConnection {
    edges: [ImageSharpEdge!]!
    field: String!
    fieldValue: String
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharpOriginal {
    height: Float
    src: String
    width: Float
}

type ImageSharpResize {
    aspectRatio: Float
    height: Int
    originalName: String
    src: String
    tracedSVG: String
    width: Int
}

type ImageSharpResolutions {
    aspectRatio: Float
    base64: String
    height: Float!
    originalName: String
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float!
}

type ImageSharpSizes {
    aspectRatio: Float!
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int!
    presentationWidth: Int!
    sizes: String!
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type Internal {
    content: String
    contentDigest: String!
    description: String
    fieldOwners: [String]
    ignoreType: Boolean
    mediaType: String
    owner: String!
    type: String!
}

type MAGENTO {
    "Returns information about shopping cart"
    cart(cart_id: String!): MAGENTO_Cart
    categories(
        "Specifies which page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Identifies which Category filter inputs to search for and return."
        filters: MAGENTO_CategoryFilterInput,
        "Specifies the maximum number of results to return at once. This attribute is optional."
        pageSize: Int = 20
    ): MAGENTO_CategoryResult
    "The category query searches for categories that match the criteria specified in the search and filter attributes."
    category(
        "Id of the category."
        id: Int
    ): MAGENTO_CategoryTree @deprecated(reason : "Use 'categoryList' query instead of 'category' query")
    "Returns an array of categories based on the specified filters."
    categoryList(
        "Identifies which Category filter inputs to search for and return."
        filters: MAGENTO_CategoryFilterInput
    ): [MAGENTO_CategoryTree]
    "The Checkout Agreements information"
    checkoutAgreements: [MAGENTO_CheckoutAgreement]
    "The CMS block query returns information about CMS blocks"
    cmsBlocks(
        "Identifiers of the CMS blocks"
        identifiers: [String]
    ): MAGENTO_CmsBlocks
    "The CMS page query returns information about a CMS page"
    cmsPage(
        "Id of the CMS page"
        id: Int,
        "Identifier of the CMS page"
        identifier: String
    ): MAGENTO_CmsPage
    "The countries query provides information for all countries."
    countries: [MAGENTO_Country]
    "The countries query provides information for a single country."
    country(id: String): MAGENTO_Country
    "The currency query returns information about store currency."
    currency: MAGENTO_Currency
    "The customAttributeMetadata query returns the attribute type, given an attribute code and entity type"
    customAttributeMetadata(attributes: [MAGENTO_AttributeInput!]!): MAGENTO_CustomAttributeMetadata
    "The customer query returns information about a customer account"
    customer: MAGENTO_Customer
    "Returns information about the customer shopping cart"
    customerCart: MAGENTO_Cart!
    "The query returns the contents of a customer's downloadable products"
    customerDownloadableProducts: MAGENTO_CustomerDownloadableProducts
    "List of customer orders"
    customerOrders: MAGENTO_CustomerOrders
    "Return a list of customer payment tokens"
    customerPaymentTokens: MAGENTO_CustomerPaymentTokens
    "Retrieve secure PayPal url for Payments Pro Hosted Solution transaction."
    getHostedProUrl(input: MAGENTO_HostedProUrlInput!): MAGENTO_HostedProUrl
    "Retrieve payment credentials for transaction. Use this query for Payflow Link and Payments Advanced payment methods."
    getPayflowLinkToken(input: MAGENTO_PayflowLinkTokenInput!): MAGENTO_PayflowLinkToken
    isEmailAvailable(
        "The new customer email"
        email: String!
    ): MAGENTO_IsEmailAvailableOutput
    "The pickup locations query searches for locations that match the search request requirements."
    pickupLocations(
        "Perform search by location using radius and search term."
        area: MAGENTO_AreaInput,
        "Specifies which page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Apply filters by attributes."
        filters: MAGENTO_PickupLocationFilterInput,
        "The maximum number of pickup locations to return at once. The attribute is optional."
        pageSize: Int = 20,
        "Specifies which attribute to sort on, and whether to return the results in ascending or descending order."
        sort: MAGENTO_PickupLocationSortInput
    ): MAGENTO_PickupLocations
    "The products query searches for products that match the criteria specified in the search and filter attributes."
    products(
        "Specifies which page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Identifies which product attributes to search for and return."
        filter: MAGENTO_ProductAttributeFilterInput,
        "Specifies the maximum number of results to return at once. This attribute is optional."
        pageSize: Int = 20,
        "Performs a full-text search using the specified key words."
        search: String,
        "Specifies which attributes to sort on, and whether to return the results in ascending or descending order."
        sort: MAGENTO_ProductAttributeSortInput
    ): MAGENTO_Products
    "The store config query"
    storeConfig: MAGENTO_StoreConfig
    """

    The urlResolver query returns the relative URL for a specified product,
    category or CMS page, using as input a url_key appended by the url_suffix, if one exists
    """
    urlResolver(url: String!): MAGENTO_EntityUrl
    "The wishlist query returns the contents of a customer's wish list"
    wishlist: MAGENTO_WishlistOutput @deprecated(reason : "Moved under `Customer` `wishlist`")
}

type MAGENTO_AddBundleProductsToCartOutput {
    cart: MAGENTO_Cart!
}

type MAGENTO_AddConfigurableProductsToCartOutput {
    cart: MAGENTO_Cart!
}

type MAGENTO_AddDownloadableProductsToCartOutput {
    cart: MAGENTO_Cart!
}

type MAGENTO_AddSimpleProductsToCartOutput {
    cart: MAGENTO_Cart!
}

type MAGENTO_AddVirtualProductsToCartOutput {
    cart: MAGENTO_Cart!
}

"A bucket that contains information for each filterable option (such as price, category ID, and custom attributes)."
type MAGENTO_Aggregation {
    "Attribute code of the aggregation group."
    attribute_code: String!
    "The number of options in the aggregation group."
    count: Int
    "The aggregation display name."
    label: String
    "Array of options for the aggregation."
    options: [MAGENTO_AggregationOption]
}

type MAGENTO_AggregationOption implements MAGENTO_AggregationOptionInterface {
    "The number of items that match the aggregation option."
    count: Int
    "Aggregation option display label."
    label: String
    "The internal ID that represents the value of the option."
    value: String!
}

type MAGENTO_AppliedCoupon {
    code: String!
}

type MAGENTO_ApplyCouponToCartOutput {
    cart: MAGENTO_Cart!
}

"Attribute contains the attribute_type of the specified attribute_code and entity_type"
type MAGENTO_Attribute {
    "The unique identifier for an attribute code. This value should be in lowercase letters without spaces."
    attribute_code: String
    "Attribute options list."
    attribute_options: [MAGENTO_AttributeOption]
    "The data type of the attribute"
    attribute_type: String
    "The type of entity that defines the attribute"
    entity_type: String
    "The frontend input type of the attribute"
    input_type: String
}

"Attribute option."
type MAGENTO_AttributeOption {
    "Attribute option label."
    label: String
    "Attribute option value."
    value: String
}

type MAGENTO_AvailablePaymentMethod {
    "The payment method code"
    code: String!
    "The payment method title."
    title: String!
}

type MAGENTO_AvailableShippingMethod {
    amount: MAGENTO_Money!
    available: Boolean!
    base_amount: MAGENTO_Money @deprecated(reason : "The field should not be used on the storefront")
    carrier_code: String!
    carrier_title: String!
    error_message: String
    "Could be null if method is not available"
    method_code: String
    "Could be null if method is not available"
    method_title: String
    price_excl_tax: MAGENTO_Money!
    price_incl_tax: MAGENTO_Money!
}

type MAGENTO_BillingCartAddress implements MAGENTO_CartAddressInterface {
    city: String!
    company: String
    country: MAGENTO_CartAddressCountry!
    customer_notes: String @deprecated(reason : "The field is used only in shipping address")
    firstname: String!
    lastname: String!
    postcode: String
    region: MAGENTO_CartAddressRegion
    street: [String]!
    telephone: String!
}

"Breadcrumb item."
type MAGENTO_Breadcrumb {
    "Category ID."
    category_id: Int
    "Category level."
    category_level: Int
    "Category name."
    category_name: String
    "Category URL key."
    category_url_key: String
    "Category URL path."
    category_url_path: String
}

type MAGENTO_BundleCartItem implements MAGENTO_CartItemInterface {
    bundle_options: [MAGENTO_SelectedBundleOption]!
    customizable_options: [MAGENTO_SelectedCustomizableOption]!
    id: String!
    prices: MAGENTO_CartItemPrices
    product: MAGENTO_ProductInterface!
    quantity: Float!
}

"BundleItem defines an individual item in a bundle product."
type MAGENTO_BundleItem {
    "An ID assigned to each type of item in a bundle product."
    option_id: Int
    "An array of additional options for this bundle item."
    options: [MAGENTO_BundleItemOption]
    "he relative position of this item compared to the other bundle items."
    position: Int
    "Indicates whether the item must be included in the bundle."
    required: Boolean
    "The SKU of the bundle product."
    sku: String
    "The display name of the item."
    title: String
    "The input type that the customer uses to select the item. Examples include radio button and checkbox."
    type: String
}

"BundleItemOption defines characteristics and options for a specific bundle item."
type MAGENTO_BundleItemOption {
    "Indicates whether the customer can change the number of items for this option."
    can_change_quantity: Boolean
    "The ID assigned to the bundled item option."
    id: Int
    "Indicates whether this option is the default option."
    is_default: Boolean
    "The text that identifies the bundled item option."
    label: String
    "When a bundle item contains multiple options, the relative position of this option compared to the other options."
    position: Int
    "The price of the selected option."
    price: Float
    "One of FIXED, PERCENT, or DYNAMIC."
    price_type: MAGENTO_PriceTypeEnum
    "Contains details about this product option."
    product: MAGENTO_ProductInterface
    "Indicates the quantity of this specific bundle item."
    qty: Float @deprecated(reason : "The `qty` is deprecated. Use `quantity` instead.")
    "Indicates the quantity of this specific bundle item."
    quantity: Float
}

"BundleProduct defines basic features of a bundle product and contains multiple BundleItems."
type MAGENTO_BundleProduct implements MAGENTO_CustomizableProductInterface & MAGENTO_PhysicalProductInterface & MAGENTO_ProductInterface {
    activity: String
    "The attribute set assigned to the product."
    attribute_set_id: Int
    """

    Relative canonical URL. This value is returned only if the system setting 'Use
    Canonical Link Meta Tag For Products' is enabled
    """
    canonical_url: String
    "The categories assigned to a product."
    categories: [MAGENTO_CategoryInterface]
    category_gear: String
    climate: String
    collar: String
    color: String
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String
    "Crosssell Products"
    crosssell_products: [MAGENTO_ProductInterface]
    "Detailed information about the product. The value can include simple HTML tags."
    description: MAGENTO_ComplexTextValue
    "Indicates whether the bundle product has a dynamic price."
    dynamic_price: Boolean
    "Indicates whether the bundle product has a dynamic SK."
    dynamic_sku: Boolean
    "Indicates whether the bundle product has a dynamically calculated weight."
    dynamic_weight: Boolean
    eco_collection: Int
    erin_recommends: Int
    features_bags: String
    format: Int
    gender: String
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int
    "The relative path to the main image on the product page."
    image: MAGENTO_ProductImage
    "An array containing information about individual bundle items."
    items: [MAGENTO_BundleItem]
    "A number representing the product's manufacturer."
    manufacturer: Int
    material: String
    "An array of Media Gallery objects."
    media_gallery: [MAGENTO_MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MAGENTO_MediaGalleryEntry] @deprecated(reason : "Use product's `media_gallery` instead")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "The product name. Customers use this name to identify the product."
    name: String
    new: Int
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "An array of options for a customizable product."
    options: [MAGENTO_CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    pattern: String
    performance_fabric: Int
    "A ProductPrices object, indicating the price of an item."
    price: MAGENTO_ProductPrices @deprecated(reason : "Use price_range for product price information.")
    "A PriceRange object, indicating the range of prices for the product"
    price_range: MAGENTO_PriceRange!
    "An array of TierPrice objects."
    price_tiers: [MAGENTO_TierPrice]
    "One of PRICE_RANGE or AS_LOW_AS."
    price_view: MAGENTO_PriceViewEnum
    "An array of ProductLinks objects."
    product_links: [MAGENTO_ProductLinksInterface]
    "Related Products"
    related_products: [MAGENTO_ProductInterface]
    sale: Int
    "Indicates whether to ship bundle items together or individually."
    ship_bundle_items: MAGENTO_ShipBundleItemsEnum
    "A short description of the product. Its use depends on the theme."
    short_description: MAGENTO_ComplexTextValue
    size: Int
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    sleeve: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: MAGENTO_ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String
    "The discounted price of the product."
    special_price: Float
    "The end date that a product has a special price."
    special_to_date: String
    "Stock status of the product"
    stock_status: MAGENTO_ProductStockStatus
    strap_bags: String
    style_bags: String
    style_bottom: String
    style_general: String
    "The file name of a swatch image"
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: MAGENTO_ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason : "Use price_tiers for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [MAGENTO_ProductTierPrices] @deprecated(reason : "Use price_tiers for product tier price information.")
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason : "Use __typename instead.")
    "Timestamp indicating when the product was updated."
    updated_at: String
    "Upsell Products"
    upsell_products: [MAGENTO_ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason : "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [MAGENTO_UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [MAGENTO_Website] @deprecated(reason : "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

type MAGENTO_Cart {
    "An array of coupons that have been applied to the cart"
    applied_coupon: MAGENTO_AppliedCoupon @deprecated(reason : "Use applied_coupons instead ")
    "An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which specifies the coupon code"
    applied_coupons: [MAGENTO_AppliedCoupon]
    "Available payment methods"
    available_payment_methods: [MAGENTO_AvailablePaymentMethod]
    billing_address: MAGENTO_BillingCartAddress
    email: String
    "The ID of the cart."
    id: ID!
    is_virtual: Boolean!
    items: [MAGENTO_CartItemInterface]
    prices: MAGENTO_CartPrices
    selected_payment_method: MAGENTO_SelectedPaymentMethod
    shipping_addresses: [MAGENTO_ShippingCartAddress]!
    total_quantity: Float!
}

type MAGENTO_CartAddressCountry {
    code: String!
    label: String!
}

type MAGENTO_CartAddressRegion {
    code: String
    label: String
    region_id: Int
}

type MAGENTO_CartDiscount {
    amount: MAGENTO_Money!
    label: [String]!
}

type MAGENTO_CartItemPrices {
    "An array of discounts to be applied to the cart item"
    discounts: [MAGENTO_Discount]
    price: MAGENTO_Money!
    row_total: MAGENTO_Money!
    row_total_including_tax: MAGENTO_Money!
    "The total of all discounts applied to the item"
    total_item_discount: MAGENTO_Money
}

"Deprecated: `cart_items` field of `ShippingCartAddress` returns now  `CartItemInterface` instead of `CartItemQuantity`"
type MAGENTO_CartItemQuantity {
    cart_item_id: Int! @deprecated(reason : "`cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead of `CartItemQuantity`")
    quantity: Float! @deprecated(reason : "`cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead of `CartItemQuantity`")
}

type MAGENTO_CartItemSelectedOptionValuePrice {
    type: MAGENTO_PriceTypeEnum!
    units: String!
    value: Float!
}

type MAGENTO_CartPrices {
    applied_taxes: [MAGENTO_CartTaxItem]
    discount: MAGENTO_CartDiscount @deprecated(reason : "Use discounts instead ")
    "An array of applied discounts"
    discounts: [MAGENTO_Discount]
    grand_total: MAGENTO_Money
    subtotal_excluding_tax: MAGENTO_Money
    subtotal_including_tax: MAGENTO_Money
    subtotal_with_discount_excluding_tax: MAGENTO_Money
}

type MAGENTO_CartTaxItem {
    amount: MAGENTO_Money!
    label: String!
}

"The category products object returned in the Category query."
type MAGENTO_CategoryProducts {
    "An array of products that are assigned to the category."
    items: [MAGENTO_ProductInterface]
    "An object that includes the page_info and currentPage values specified in the query."
    page_info: MAGENTO_SearchResultPageInfo
    """

    The number of products in the category that are marked as visible. By default,
    in complex products, parent products are visible, but their child products are not.
    """
    total_count: Int
}

"A collection of CategoryTree objects and pagination information."
type MAGENTO_CategoryResult {
    "A list of categories that match the filter criteria."
    items: [MAGENTO_CategoryTree]
    "An object that includes the page_info and currentPage values specified in the query."
    page_info: MAGENTO_SearchResultPageInfo
    "The total number of categories that match the criteria."
    total_count: Int
}

"Category Tree implementation."
type MAGENTO_CategoryTree implements MAGENTO_CategoryInterface {
    available_sort_by: [String]
    "Breadcrumbs, parent categories info."
    breadcrumbs: [MAGENTO_Breadcrumb]
    """

    Relative canonical URL. This value is returned only if the system setting 'Use
    Canonical Link Meta Tag For Categories' is enabled
    """
    canonical_url: String
    "Child categories tree."
    children: [MAGENTO_CategoryTree]
    children_count: String
    "Category CMS Block."
    cms_block: MAGENTO_CmsBlock
    "Timestamp indicating when the category was created."
    created_at: String
    custom_layout_update_file: String
    "The attribute to use for sorting."
    default_sort_by: String
    "An optional description of the category."
    description: String
    display_mode: String
    filter_price_range: Float
    "An ID that uniquely identifies the category."
    id: Int
    image: String
    include_in_menu: Int
    is_anchor: Int
    landing_page: Int
    "Indicates the depth of the category within the tree."
    level: Int
    meta_description: String
    meta_keywords: String
    meta_title: String
    "The display name of the category."
    name: String
    "Category Path."
    path: String
    "Category path in store."
    path_in_store: String
    "The position of the category relative to other categories at the same level in tree."
    position: Int
    """

    The number of products in the category that are marked as visible. By default,
    in complex products, parent products are visible, but their child products are not.
    """
    product_count: Int
    "The list of products assigned to the category."
    products(
        "Specifies which page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Specifies the maximum number of results to return at once. This attribute is optional."
        pageSize: Int = 20,
        "Specifies which attributes to sort on, and whether to return the results in ascending or descending order."
        sort: MAGENTO_ProductAttributeSortInput
    ): MAGENTO_CategoryProducts
    "Timestamp indicating when the category was updated."
    updated_at: String
    "The url key assigned to the category."
    url_key: String
    "The url path assigned to the category."
    url_path: String
    "The part of the category URL that is appended after the url key"
    url_suffix: String
}

"Defines all Checkout Agreement information"
type MAGENTO_CheckoutAgreement {
    "Checkout Agreement identifier"
    agreement_id: Int!
    "Checkout Agreement checkbox text"
    checkbox_text: String!
    "Checkout Agreement content"
    content: String!
    "Checkout Agreement content height"
    content_height: String
    "Is Checkout Agreement content in HTML format"
    is_html: Boolean!
    mode: MAGENTO_CheckoutAgreementMode!
    "Checkout Agreement name"
    name: String!
}

"An error encountered while adding an item the the cart."
type MAGENTO_CheckoutUserInputError {
    "Checkout-specific error code"
    code: MAGENTO_CheckoutUserInputErrorCodes!
    "Localized error message"
    message: String!
    """

    Path to the input field that caused an error. See the GraphQL specification
    about path errors for details: http://spec.graphql.org/draft/#sec-Errors
    """
    path: [String]!
}

"CMS block defines all CMS block information"
type MAGENTO_CmsBlock {
    "CMS block content"
    content: String
    "CMS block identifier"
    identifier: String
    "CMS block title"
    title: String
}

"CMS blocks information"
type MAGENTO_CmsBlocks {
    "An array of CMS blocks"
    items: [MAGENTO_CmsBlock]
}

"CMS page defines all CMS page information"
type MAGENTO_CmsPage {
    "CMS page content"
    content: String
    "CMS page content heading"
    content_heading: String
    "Identifier of the CMS page"
    identifier: String
    "CMS page meta description"
    meta_description: String
    "CMS page meta keywords"
    meta_keywords: String
    "CMS page meta title"
    meta_title: String
    "CMS page content heading"
    page_layout: String
    "CMS page title"
    title: String
    "URL key of CMS page"
    url_key: String
}

type MAGENTO_ColorSwatchData implements MAGENTO_SwatchDataInterface {
    "Value of swatch item (HEX color code, image link or textual value)"
    value: String
}

type MAGENTO_ComplexTextValue {
    "HTML format"
    html: String!
}

"""

ConfigurableAttributeOption contains the value_index (and other related
information) assigned to a configurable product option
"""
type MAGENTO_ConfigurableAttributeOption {
    "The ID assigned to the attribute"
    code: String
    "A string that describes the configurable attribute option"
    label: String
    "A unique index number assigned to the configurable product option"
    value_index: Int
}

type MAGENTO_ConfigurableCartItem implements MAGENTO_CartItemInterface {
    configurable_options: [MAGENTO_SelectedConfigurableOption]!
    customizable_options: [MAGENTO_SelectedCustomizableOption]!
    id: String!
    prices: MAGENTO_CartItemPrices
    product: MAGENTO_ProductInterface!
    quantity: Float!
}

"ConfigurableProduct defines basic features of a configurable product and its simple product variants"
type MAGENTO_ConfigurableProduct implements MAGENTO_CustomizableProductInterface & MAGENTO_PhysicalProductInterface & MAGENTO_ProductInterface {
    activity: String
    "The attribute set assigned to the product."
    attribute_set_id: Int
    """

    Relative canonical URL. This value is returned only if the system setting 'Use
    Canonical Link Meta Tag For Products' is enabled
    """
    canonical_url: String
    "The categories assigned to a product."
    categories: [MAGENTO_CategoryInterface]
    category_gear: String
    climate: String
    collar: String
    color: String
    "An array of linked simple product items"
    configurable_options: [MAGENTO_ConfigurableProductOptions]
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String
    "Crosssell Products"
    crosssell_products: [MAGENTO_ProductInterface]
    "Detailed information about the product. The value can include simple HTML tags."
    description: MAGENTO_ComplexTextValue
    eco_collection: Int
    erin_recommends: Int
    features_bags: String
    format: Int
    gender: String
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int
    "The relative path to the main image on the product page."
    image: MAGENTO_ProductImage
    "A number representing the product's manufacturer."
    manufacturer: Int
    material: String
    "An array of Media Gallery objects."
    media_gallery: [MAGENTO_MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MAGENTO_MediaGalleryEntry] @deprecated(reason : "Use product's `media_gallery` instead")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "The product name. Customers use this name to identify the product."
    name: String
    new: Int
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "An array of options for a customizable product."
    options: [MAGENTO_CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    pattern: String
    performance_fabric: Int
    "A ProductPrices object, indicating the price of an item."
    price: MAGENTO_ProductPrices @deprecated(reason : "Use price_range for product price information.")
    "A PriceRange object, indicating the range of prices for the product"
    price_range: MAGENTO_PriceRange!
    "An array of TierPrice objects."
    price_tiers: [MAGENTO_TierPrice]
    "An array of ProductLinks objects."
    product_links: [MAGENTO_ProductLinksInterface]
    "Related Products"
    related_products: [MAGENTO_ProductInterface]
    sale: Int
    "A short description of the product. Its use depends on the theme."
    short_description: MAGENTO_ComplexTextValue
    size: Int
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    sleeve: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: MAGENTO_ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String
    "The discounted price of the product."
    special_price: Float
    "The end date that a product has a special price."
    special_to_date: String
    "Stock status of the product"
    stock_status: MAGENTO_ProductStockStatus
    strap_bags: String
    style_bags: String
    style_bottom: String
    style_general: String
    "The file name of a swatch image"
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: MAGENTO_ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason : "Use price_tiers for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [MAGENTO_ProductTierPrices] @deprecated(reason : "Use price_tiers for product tier price information.")
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason : "Use __typename instead.")
    "Timestamp indicating when the product was updated."
    updated_at: String
    "Upsell Products"
    upsell_products: [MAGENTO_ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason : "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [MAGENTO_UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of variants of products"
    variants: [MAGENTO_ConfigurableVariant]
    "An array of websites in which the product is available."
    websites: [MAGENTO_Website] @deprecated(reason : "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

"ConfigurableProductOptions defines configurable attributes for the specified product"
type MAGENTO_ConfigurableProductOptions {
    "A string that identifies the attribute"
    attribute_code: String
    "The ID assigned to the attribute"
    attribute_id: String @deprecated(reason : "Use attribute_id_v2 instead")
    "The ID assigned to the attribute"
    attribute_id_v2: Int
    "The configurable option ID number assigned by the system"
    id: Int
    "A string that describes the configurable product option, which is displayed on the UI"
    label: String
    "A number that indicates the order in which the attribute is displayed"
    position: Int
    "This is the same as a product's id field"
    product_id: Int
    "Indicates whether the option is the default"
    use_default: Boolean
    "An array that defines the value_index codes assigned to the configurable product"
    values: [MAGENTO_ConfigurableProductOptionsValues]
}

"ConfigurableProductOptionsValues contains the index number assigned to a configurable product option"
type MAGENTO_ConfigurableProductOptionsValues {
    "The label of the product on the default store"
    default_label: String
    "The label of the product"
    label: String
    "The label of the product on the current store"
    store_label: String
    "Swatch data for configurable product option"
    swatch_data: MAGENTO_SwatchDataInterface
    "Indicates whether to use the default_label"
    use_default_value: Boolean
    "A unique index number assigned to the configurable product option"
    value_index: Int
}

"An array containing all the simple product variants of a configurable product"
type MAGENTO_ConfigurableVariant {
    attributes: [MAGENTO_ConfigurableAttributeOption]
    product: MAGENTO_SimpleProduct
}

type MAGENTO_Country {
    available_regions: [MAGENTO_Region]
    full_name_english: String
    full_name_locale: String
    id: String
    three_letter_abbreviation: String
    two_letter_abbreviation: String
}

"Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods."
type MAGENTO_CreatePayflowProTokenOutput {
    response_message: String!
    result: Int!
    result_code: Int!
    secure_token: String!
    secure_token_id: String!
}

type MAGENTO_Currency {
    available_currency_codes: [String]
    base_currency_code: String
    base_currency_symbol: String
    default_display_currecy_code: String @deprecated(reason : "Symbol was missed. Use `default_display_currency_code`.")
    default_display_currecy_symbol: String @deprecated(reason : "Symbol was missed. Use `default_display_currency_symbol`.")
    default_display_currency_code: String
    default_display_currency_symbol: String
    exchange_rates: [MAGENTO_ExchangeRate]
}

"CustomAttributeMetadata defines an array of attribute_codes and entity_types"
type MAGENTO_CustomAttributeMetadata {
    "An array of attributes"
    items: [MAGENTO_Attribute]
}

"Customer defines the customer name and address and other details"
type MAGENTO_Customer {
    "An array containing the customer's shipping and billing addresses"
    addresses: [MAGENTO_CustomerAddress]
    "Timestamp indicating when the account was created"
    created_at: String
    "The customer's date of birth"
    date_of_birth: String
    "The ID assigned to the billing address"
    default_billing: String
    "The ID assigned to the shipping address"
    default_shipping: String
    "The customer's date of birth"
    dob: String @deprecated(reason : "Use `date_of_birth` instead")
    "The customer's email address. Required"
    email: String
    "The customer's first name"
    firstname: String
    "The customer's gender (Male - 1, Female - 2)"
    gender: Int
    group_id: Int @deprecated(reason : "Customer group should not be exposed in the storefront scenarios")
    "The ID assigned to the customer"
    id: Int @deprecated(reason : "id is not needed as part of Customer because on server side it can be identified based on customer token used for authentication. There is no need to know customer ID on the client side.")
    "Indicates whether the customer is subscribed to the company's newsletter"
    is_subscribed: Boolean
    "The customer's family name"
    lastname: String
    "The customer's middle name"
    middlename: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "A value such as Sr., Jr., or III"
    suffix: String
    "The customer's Value-added tax (VAT) number (for corporate customers)"
    taxvat: String
    "The wishlist query returns the contents of a customer's wish lists"
    wishlist: MAGENTO_Wishlist!
}

"CustomerAddress contains detailed information about a customer's billing and shipping addresses"
type MAGENTO_CustomerAddress {
    "The city or town"
    city: String
    "The customer's company"
    company: String
    "The customer's country"
    country_code: MAGENTO_CountryCodeEnum
    "The customer's country"
    country_id: String @deprecated(reason : "Use `country_code` instead.")
    custom_attributes: [MAGENTO_CustomerAddressAttribute] @deprecated(reason : "Custom attributes should not be put into container")
    "The customer ID"
    customer_id: Int @deprecated(reason : "customer_id is not needed as part of CustomerAddress, address ID (id) is unique identifier for the addresses.")
    "Indicates whether the address is the default billing address"
    default_billing: Boolean
    "Indicates whether the address is the default shipping address"
    default_shipping: Boolean
    "Address extension attributes"
    extension_attributes: [MAGENTO_CustomerAddressAttribute]
    "The fax number"
    fax: String
    "The first name of the person associated with the shipping/billing address"
    firstname: String
    "The ID assigned to the address object"
    id: Int
    "The family name of the person associated with the shipping/billing address"
    lastname: String
    "The middle name of the person associated with the shipping/billing address"
    middlename: String
    "The customer's ZIP or postal code"
    postcode: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "An object containing the region name, region code, and region ID"
    region: MAGENTO_CustomerAddressRegion
    "The unique ID for a pre-defined region"
    region_id: Int
    "An array of strings that define the street number and name"
    street: [String]
    "A value such as Sr., Jr., or III"
    suffix: String
    "The telephone number"
    telephone: String
    "The customer's Value-added tax (VAT) number (for corporate customers)"
    vat_id: String
}

type MAGENTO_CustomerAddressAttribute {
    "Attribute code"
    attribute_code: String
    "Attribute value"
    value: String
}

"CustomerAddressRegion defines the customer's state or province"
type MAGENTO_CustomerAddressRegion {
    "The state or province name"
    region: String
    "The address region code"
    region_code: String
    "The unique ID for a pre-defined region"
    region_id: Int
}

type MAGENTO_CustomerDownloadableProduct {
    date: String
    download_url: String
    order_increment_id: String
    remaining_downloads: String
    status: String
}

type MAGENTO_CustomerDownloadableProducts {
    "List of purchased downloadable items"
    items: [MAGENTO_CustomerDownloadableProduct]
}

"Order mapping fields"
type MAGENTO_CustomerOrder {
    created_at: String
    grand_total: Float
    id: Int
    increment_id: String @deprecated(reason : "Use the order_number instead.")
    "The order number"
    order_number: String!
    status: String
}

type MAGENTO_CustomerOrders {
    "Array of orders"
    items: [MAGENTO_CustomerOrder]
}

type MAGENTO_CustomerOutput {
    customer: MAGENTO_Customer!
}

type MAGENTO_CustomerPaymentTokens {
    "An array of payment tokens"
    items: [MAGENTO_PaymentToken]!
}

type MAGENTO_CustomerToken {
    "The customer token"
    token: String
}

"CustomizableAreaOption contains information about a text area that is defined as part of a customizable option."
type MAGENTO_CustomizableAreaOption implements MAGENTO_CustomizableOptionInterface {
    "Option ID."
    option_id: Int
    "The Stock Keeping Unit of the base product."
    product_sku: String
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "An object that defines a text area."
    value: MAGENTO_CustomizableAreaValue
}

"CustomizableAreaValue defines the price and sku of a product whose page contains a customized text area."
type MAGENTO_CustomizableAreaValue {
    "The maximum number of characters that can be entered for this customizable option."
    max_characters: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: MAGENTO_PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
}

"""

CustomizableCheckbbixOption contains information about a set of checkbox values
that are defined as part of a customizable option.
"""
type MAGENTO_CustomizableCheckboxOption implements MAGENTO_CustomizableOptionInterface {
    "Option ID."
    option_id: Int
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "An array that defines a set of checkbox values."
    value: [MAGENTO_CustomizableCheckboxValue]
}

"CustomizableCheckboxValue defines the price and sku of a product whose page contains a customized set of checkbox values."
type MAGENTO_CustomizableCheckboxValue {
    "The ID assigned to the value."
    option_type_id: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: MAGENTO_PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The order in which the checkbox value is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
}

"CustomizableDateOption contains information about a date picker that is defined as part of a customizable option."
type MAGENTO_CustomizableDateOption implements MAGENTO_CustomizableOptionInterface {
    "Option ID."
    option_id: Int
    "The Stock Keeping Unit of the base product."
    product_sku: String
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "An object that defines a date field in a customizable option."
    value: MAGENTO_CustomizableDateValue
}

"CustomizableDateValue defines the price and sku of a product whose page contains a customized date picker."
type MAGENTO_CustomizableDateValue {
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: MAGENTO_PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
}

"CustomizableDropDownOption contains information about a drop down menu that is defined as part of a customizable option."
type MAGENTO_CustomizableDropDownOption implements MAGENTO_CustomizableOptionInterface {
    "Option ID."
    option_id: Int
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "An array that defines the set of options for a drop down menu."
    value: [MAGENTO_CustomizableDropDownValue]
}

"CustomizableDropDownValue defines the price and sku of a product whose page contains a customized drop down menu."
type MAGENTO_CustomizableDropDownValue {
    "The ID assigned to the value."
    option_type_id: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: MAGENTO_PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
}

"CustomizableFieldOption contains information about a text field that is defined as part of a customizable option."
type MAGENTO_CustomizableFieldOption implements MAGENTO_CustomizableOptionInterface {
    "Option ID."
    option_id: Int
    "The Stock Keeping Unit of the base product."
    product_sku: String
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "An object that defines a text field."
    value: MAGENTO_CustomizableFieldValue
}

"CustomizableFieldValue defines the price and sku of a product whose page contains a customized text field."
type MAGENTO_CustomizableFieldValue {
    "The maximum number of characters that can be entered for this customizable option."
    max_characters: Int
    "The price of the custom value."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: MAGENTO_PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
}

"CustomizableFileOption contains information about a file picker that is defined as part of a customizable option."
type MAGENTO_CustomizableFileOption implements MAGENTO_CustomizableOptionInterface {
    "Option ID."
    option_id: Int
    "The Stock Keeping Unit of the base product."
    product_sku: String
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "An object that defines a file value."
    value: MAGENTO_CustomizableFileValue
}

"CustomizableFileValue defines the price and sku of a product whose page contains a customized file picker."
type MAGENTO_CustomizableFileValue {
    "The file extension to accept."
    file_extension: String
    "The maximum width of an image."
    image_size_x: Int
    "The maximum height of an image."
    image_size_y: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: MAGENTO_PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
}

"CustomizableMultipleOption contains information about a multiselect that is defined as part of a customizable option."
type MAGENTO_CustomizableMultipleOption implements MAGENTO_CustomizableOptionInterface {
    "Option ID."
    option_id: Int
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "An array that defines the set of options for a multiselect."
    value: [MAGENTO_CustomizableMultipleValue]
}

"CustomizableMultipleValue defines the price and sku of a product whose page contains a customized multiselect."
type MAGENTO_CustomizableMultipleValue {
    "The ID assigned to the value."
    option_type_id: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: MAGENTO_PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
}

"CustomizableRadioOption contains information about a set of radio buttons that are defined as part of a customizable option."
type MAGENTO_CustomizableRadioOption implements MAGENTO_CustomizableOptionInterface {
    "Option ID."
    option_id: Int
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
    "An array that defines a set of radio buttons."
    value: [MAGENTO_CustomizableRadioValue]
}

"CustomizableRadioValue defines the price and sku of a product whose page contains a customized set of radio buttons."
type MAGENTO_CustomizableRadioValue {
    "The ID assigned to the value."
    option_type_id: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: MAGENTO_PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The order in which the radio button is displayed."
    sort_order: Int
    "The display name for this option."
    title: String
}

type MAGENTO_DeletePaymentTokenOutput {
    customerPaymentTokens: MAGENTO_CustomerPaymentTokens
    result: Boolean!
}

"Defines an individual discount. A discount can be applied to the cart as a whole or to an item."
type MAGENTO_Discount {
    "The amount of the discount"
    amount: MAGENTO_Money!
    "A description of the discount"
    label: String!
}

"Downloadable Cart Item"
type MAGENTO_DownloadableCartItem implements MAGENTO_CartItemInterface {
    customizable_options: [MAGENTO_SelectedCustomizableOption]
    id: String!
    "An array containing information about the links for the added to cart downloadable product"
    links: [MAGENTO_DownloadableProductLinks]
    prices: MAGENTO_CartItemPrices
    product: MAGENTO_ProductInterface!
    quantity: Float!
    "DownloadableProductSamples defines characteristics of a downloadable product"
    samples: [MAGENTO_DownloadableProductSamples]
}

"DownloadableProduct defines a product that the customer downloads"
type MAGENTO_DownloadableProduct implements MAGENTO_CustomizableProductInterface & MAGENTO_ProductInterface {
    activity: String
    "The attribute set assigned to the product."
    attribute_set_id: Int
    """

    Relative canonical URL. This value is returned only if the system setting 'Use
    Canonical Link Meta Tag For Products' is enabled
    """
    canonical_url: String
    "The categories assigned to a product."
    categories: [MAGENTO_CategoryInterface]
    category_gear: String
    climate: String
    collar: String
    color: String
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String
    "Crosssell Products"
    crosssell_products: [MAGENTO_ProductInterface]
    "Detailed information about the product. The value can include simple HTML tags."
    description: MAGENTO_ComplexTextValue
    "An array containing information about the links for this downloadable product"
    downloadable_product_links: [MAGENTO_DownloadableProductLinks]
    "An array containing information about samples of this downloadable product."
    downloadable_product_samples: [MAGENTO_DownloadableProductSamples]
    eco_collection: Int
    erin_recommends: Int
    features_bags: String
    format: Int
    gender: String
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int
    "The relative path to the main image on the product page."
    image: MAGENTO_ProductImage
    "A value of 1 indicates that each link in the array must be purchased separately"
    links_purchased_separately: Int
    "The heading above the list of downloadable products"
    links_title: String
    "A number representing the product's manufacturer."
    manufacturer: Int
    material: String
    "An array of Media Gallery objects."
    media_gallery: [MAGENTO_MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MAGENTO_MediaGalleryEntry] @deprecated(reason : "Use product's `media_gallery` instead")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "The product name. Customers use this name to identify the product."
    name: String
    new: Int
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "An array of options for a customizable product."
    options: [MAGENTO_CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    pattern: String
    performance_fabric: Int
    "A ProductPrices object, indicating the price of an item."
    price: MAGENTO_ProductPrices @deprecated(reason : "Use price_range for product price information.")
    "A PriceRange object, indicating the range of prices for the product"
    price_range: MAGENTO_PriceRange!
    "An array of TierPrice objects."
    price_tiers: [MAGENTO_TierPrice]
    "An array of ProductLinks objects."
    product_links: [MAGENTO_ProductLinksInterface]
    "Related Products"
    related_products: [MAGENTO_ProductInterface]
    sale: Int
    "A short description of the product. Its use depends on the theme."
    short_description: MAGENTO_ComplexTextValue
    size: Int
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    sleeve: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: MAGENTO_ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String
    "The discounted price of the product."
    special_price: Float
    "The end date that a product has a special price."
    special_to_date: String
    "Stock status of the product"
    stock_status: MAGENTO_ProductStockStatus
    strap_bags: String
    style_bags: String
    style_bottom: String
    style_general: String
    "The file name of a swatch image"
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: MAGENTO_ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason : "Use price_tiers for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [MAGENTO_ProductTierPrices] @deprecated(reason : "Use price_tiers for product tier price information.")
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason : "Use __typename instead.")
    "Timestamp indicating when the product was updated."
    updated_at: String
    "Upsell Products"
    upsell_products: [MAGENTO_ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason : "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [MAGENTO_UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [MAGENTO_Website] @deprecated(reason : "The field should not be used on the storefront.")
}

"DownloadableProductLinks defines characteristics of a downloadable product"
type MAGENTO_DownloadableProductLinks {
    id: Int @deprecated(reason : "This information should not be exposed on frontend")
    is_shareable: Boolean @deprecated(reason : "This information should not be exposed on frontend")
    link_type: MAGENTO_DownloadableFileTypeEnum @deprecated(reason : "`sample_url` serves to get the downloadable sample")
    number_of_downloads: Int @deprecated(reason : "This information should not be exposed on frontend")
    "The price of the downloadable product"
    price: Float
    sample_file: String @deprecated(reason : "`sample_url` serves to get the downloadable sample")
    sample_type: MAGENTO_DownloadableFileTypeEnum @deprecated(reason : "`sample_url` serves to get the downloadable sample")
    "URL to the downloadable sample"
    sample_url: String
    "A number indicating the sort order"
    sort_order: Int
    "The display name of the link"
    title: String
}

"DownloadableProductSamples defines characteristics of a downloadable product"
type MAGENTO_DownloadableProductSamples {
    id: Int @deprecated(reason : "This information should not be exposed on frontend")
    sample_file: String @deprecated(reason : "`sample_url` serves to get the downloadable sample")
    sample_type: MAGENTO_DownloadableFileTypeEnum @deprecated(reason : "`sample_url` serves to get the downloadable sample")
    "URL to the downloadable sample"
    sample_url: String
    "A number indicating the sort order"
    sort_order: Int
    "The display name of the sample"
    title: String
}

"EntityUrl is an output object containing the `id`, `relative_url`, and `type` attributes"
type MAGENTO_EntityUrl {
    canonical_url: String @deprecated(reason : "The canonical_url field is deprecated, use relative_url instead.")
    "The ID assigned to the object associated with the specified url. This could be a product ID, category ID, or page ID."
    id: Int
    "301 or 302 HTTP code for url permanent or temporary redirect or 0 for the 200 no redirect"
    redirectCode: Int
    "The internal relative URL. If the specified  url is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: MAGENTO_UrlRewriteEntityTypeEnum
}

type MAGENTO_ExchangeRate {
    currency_to: String
    rate: Float
}

"A single FPT that can be applied to a product price."
type MAGENTO_FixedProductTax {
    "Amount of the FPT as a money object."
    amount: MAGENTO_Money
    "The label assigned to the FPT to be displayed on the frontend."
    label: String
}

"GroupedProduct defines a grouped product"
type MAGENTO_GroupedProduct implements MAGENTO_PhysicalProductInterface & MAGENTO_ProductInterface {
    activity: String
    "The attribute set assigned to the product."
    attribute_set_id: Int
    """

    Relative canonical URL. This value is returned only if the system setting 'Use
    Canonical Link Meta Tag For Products' is enabled
    """
    canonical_url: String
    "The categories assigned to a product."
    categories: [MAGENTO_CategoryInterface]
    category_gear: String
    climate: String
    collar: String
    color: String
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String
    "Crosssell Products"
    crosssell_products: [MAGENTO_ProductInterface]
    "Detailed information about the product. The value can include simple HTML tags."
    description: MAGENTO_ComplexTextValue
    eco_collection: Int
    erin_recommends: Int
    features_bags: String
    format: Int
    gender: String
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int
    "The relative path to the main image on the product page."
    image: MAGENTO_ProductImage
    "An array containing grouped product items"
    items: [MAGENTO_GroupedProductItem]
    "A number representing the product's manufacturer."
    manufacturer: Int
    material: String
    "An array of Media Gallery objects."
    media_gallery: [MAGENTO_MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MAGENTO_MediaGalleryEntry] @deprecated(reason : "Use product's `media_gallery` instead")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "The product name. Customers use this name to identify the product."
    name: String
    new: Int
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    pattern: String
    performance_fabric: Int
    "A ProductPrices object, indicating the price of an item."
    price: MAGENTO_ProductPrices @deprecated(reason : "Use price_range for product price information.")
    "A PriceRange object, indicating the range of prices for the product"
    price_range: MAGENTO_PriceRange!
    "An array of TierPrice objects."
    price_tiers: [MAGENTO_TierPrice]
    "An array of ProductLinks objects."
    product_links: [MAGENTO_ProductLinksInterface]
    "Related Products"
    related_products: [MAGENTO_ProductInterface]
    sale: Int
    "A short description of the product. Its use depends on the theme."
    short_description: MAGENTO_ComplexTextValue
    size: Int
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    sleeve: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: MAGENTO_ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String
    "The discounted price of the product."
    special_price: Float
    "The end date that a product has a special price."
    special_to_date: String
    "Stock status of the product"
    stock_status: MAGENTO_ProductStockStatus
    strap_bags: String
    style_bags: String
    style_bottom: String
    style_general: String
    "The file name of a swatch image"
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: MAGENTO_ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason : "Use price_tiers for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [MAGENTO_ProductTierPrices] @deprecated(reason : "Use price_tiers for product tier price information.")
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason : "Use __typename instead.")
    "Timestamp indicating when the product was updated."
    updated_at: String
    "Upsell Products"
    upsell_products: [MAGENTO_ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason : "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [MAGENTO_UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [MAGENTO_Website] @deprecated(reason : "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

"GroupedProductItem contains information about an individual grouped product item"
type MAGENTO_GroupedProductItem {
    "The relative position of this item compared to the other group items"
    position: Int
    "The ProductInterface object, which contains details about this product option"
    product: MAGENTO_ProductInterface
    "The quantity of this grouped product item"
    qty: Float
}

type MAGENTO_HostedProUrl {
    "Secure Url generated by PayPal"
    secure_form_url: String
}

"The object details of target path parameters"
type MAGENTO_HttpQueryParameter {
    "Parameter name"
    name: String
    "Parameter value"
    value: String
}

type MAGENTO_ImageSwatchData implements MAGENTO_SwatchDataInterface {
    "Thumbnail swatch image URL"
    thumbnail: String
    "Value of swatch item (HEX color code, image link or textual value)"
    value: String
}

type MAGENTO_IsEmailAvailableOutput {
    "Is email availabel value"
    is_email_available: Boolean
}

type MAGENTO_LayerFilter {
    "Array of filter items."
    filter_items: [MAGENTO_LayerFilterItemInterface] @deprecated(reason : "Use Aggregation.options instead.")
    "Count of filter items in filter group."
    filter_items_count: Int @deprecated(reason : "Use Aggregation.count instead.")
    "Layered navigation filter name."
    name: String @deprecated(reason : "Use Aggregation.label instead.")
    "Request variable name for filter query."
    request_var: String @deprecated(reason : "Use Aggregation.attribute_code instead.")
}

type MAGENTO_LayerFilterItem implements MAGENTO_LayerFilterItemInterface {
    "Count of items by filter."
    items_count: Int @deprecated(reason : "Use AggregationOption.count instead.")
    "Filter label."
    label: String @deprecated(reason : "Use AggregationOption.label instead.")
    "Value for filter request variable to be used in query."
    value_string: String @deprecated(reason : "Use AggregationOption.value instead.")
}

"MediaGalleryEntry defines characteristics about images and videos associated with a specific product."
type MAGENTO_MediaGalleryEntry {
    "Contains a ProductMediaGalleryEntriesContent object."
    content: MAGENTO_ProductMediaGalleryEntriesContent
    "Whether the image is hidden from view."
    disabled: Boolean
    "The path of the image on the server."
    file: String
    "The identifier assigned to the object."
    id: Int
    "The alt text displayed on the UI when the user points to the image."
    label: String
    "image or video."
    media_type: String
    "The media item's position after it has been sorted."
    position: Int
    "Array of image types. It can have the following values: image, small_image, thumbnail."
    types: [String]
    "Contains a ProductMediaGalleryEntriesVideoContent object."
    video_content: MAGENTO_ProductMediaGalleryEntriesVideoContent
}

"A Money object defines a monetary value, including a numeric value and a currency code."
type MAGENTO_Money {
    "A three-letter currency code, such as USD or EUR"
    currency: MAGENTO_CurrencyEnum
    "A number expressing a monetary value"
    value: Float
}

type MAGENTO_Order {
    order_id: String @deprecated(reason : "The order_id field is deprecated, use order_number instead.")
    order_number: String!
}

"""

Contains information used to generate PayPal iframe for transaction. Applies to
Payflow Link and Payments Advanced payment methods.
"""
type MAGENTO_PayflowLinkToken {
    "Mode for Payflow transaction"
    mode: MAGENTO_PayflowLinkMode
    "PayPal URL used for requesting Payflow form"
    paypal_url: String
    "Secure token generated by PayPal"
    secure_token: String
    "Secure token ID generated by PayPal"
    secure_token_id: String
}

type MAGENTO_PayflowProResponseOutput {
    cart: MAGENTO_Cart!
}

"Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods."
type MAGENTO_PayflowProToken {
    response_message: String!
    result: Int!
    result_code: Int!
    secure_token: String!
    secure_token_id: String!
}

"The stored payment method available to the customer"
type MAGENTO_PaymentToken {
    "Stored account details"
    details: String
    "The payment method code associated with the token"
    payment_method_code: String!
    "The public hash of the token"
    public_hash: String!
    type: MAGENTO_PaymentTokenTypeEnum!
}

"Deprecated: use type `PaypalExpressTokenOutput` instead"
type MAGENTO_PaypalExpressToken {
    "A set of URLs that allow the buyer to authorize payment and adjust checkout details"
    paypal_urls: MAGENTO_PaypalExpressUrlList @deprecated(reason : "Use field `paypal_urls` of type `PaypalExpressTokenOutput` instead")
    "The token returned by PayPal"
    token: String @deprecated(reason : "Use field `token` of type `PaypalExpressTokenOutput` instead")
}

"""

Contains the token returned by PayPal and a set of URLs that allow the buyer to
authorize payment and adjust checkout details. Applies to Express Checkout and
Payments Standard payment methods.
"""
type MAGENTO_PaypalExpressTokenOutput {
    "A set of URLs that allow the buyer to authorize payment and adjust checkout details"
    paypal_urls: MAGENTO_PaypalExpressUrlList
    "The token returned by PayPal"
    token: String
}

"""

A set of URLs that allow the buyer to authorize payment and adjust checkout
details for Express Checkout and Payments Standard transactions.
"""
type MAGENTO_PaypalExpressUrlList {
    "The PayPal URL that allows the buyer to edit their checkout details"
    edit: String
    "The URL to the PayPal login page"
    start: String
}

"Defines Pickup Location information."
type MAGENTO_PickupLocation {
    city: String
    contact_name: String
    country_id: String
    description: String
    email: String
    fax: String
    latitude: Float
    longitude: Float
    name: String
    phone: String
    pickup_location_code: String
    postcode: String
    region: String
    region_id: Int
    street: String
}

"Top level object returned in a pickup locations search."
type MAGENTO_PickupLocations {
    "An array of pickup locations that match the specific search request."
    items: [MAGENTO_PickupLocation]
    "An object that includes the page_info and currentPage values specified in the query."
    page_info: MAGENTO_SearchResultPageInfo
    "The number of products returned."
    total_count: Int
}

type MAGENTO_PlaceOrderOutput {
    order: MAGENTO_Order!
}

"""

Price is deprecated, replaced by ProductPrice. The Price object defines the
price of a product as well as any tax-related adjustments.
"""
type MAGENTO_Price {
    "An array that provides information about tax, weee, or weee_tax adjustments."
    adjustments: [MAGENTO_PriceAdjustment] @deprecated(reason : "Price is deprecated, use ProductPrice.")
    "The price of a product plus a three-letter currency code."
    amount: MAGENTO_Money @deprecated(reason : "Price is deprecated, use ProductPrice.")
}

"""

PriceAdjustment is deprecated. Taxes will be included or excluded in the price.
The PricedAdjustment object defines the amount of money to apply as an
adjustment, the type of adjustment to apply, and whether the item is included or
excluded from the adjustment.
"""
type MAGENTO_PriceAdjustment {
    "The amount of the price adjustment and its currency code."
    amount: MAGENTO_Money
    "Indicates whether the adjustment involves tax, weee, or weee_tax."
    code: MAGENTO_PriceAdjustmentCodesEnum @deprecated(reason : "PriceAdjustment is deprecated.")
    "Indicates whether the entity described by the code attribute is included or excluded from the adjustment."
    description: MAGENTO_PriceAdjustmentDescriptionEnum @deprecated(reason : "PriceAdjustment is deprecated.")
}

"Price range for a product. If the product has a single price, the minimum and maximum price will be the same."
type MAGENTO_PriceRange {
    "The highest possible price for the product."
    maximum_price: MAGENTO_ProductPrice
    "The lowest possible price for the product."
    minimum_price: MAGENTO_ProductPrice!
}

"A discount applied to a product price."
type MAGENTO_ProductDiscount {
    "The actual value of the discount."
    amount_off: Float
    "The discount expressed a percentage."
    percent_off: Float
}

"Product image information. Contains the image URL and label."
type MAGENTO_ProductImage implements MAGENTO_MediaGalleryInterface {
    "Whether the image is hidden from view."
    disabled: Boolean
    "The label of the product image or video."
    label: String
    "The media item's position after it has been sorted."
    position: Int
    "The URL of the product image or video."
    url: String
}

"ProductLinks is an implementation of ProductLinksInterface."
type MAGENTO_ProductLinks implements MAGENTO_ProductLinksInterface {
    "One of related, associated, upsell, or crosssell."
    link_type: String
    "The SKU of the linked product."
    linked_product_sku: String
    "The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable)."
    linked_product_type: String
    "The position within the list of product links."
    position: Int
    "The identifier of the linked product."
    sku: String
}

"ProductMediaGalleryEntriesContent contains an image in base64 format and basic information about the image."
type MAGENTO_ProductMediaGalleryEntriesContent {
    "The image in base64 format."
    base64_encoded_data: String
    "The file name of the image."
    name: String
    "The MIME type of the file, such as image/png."
    type: String
}

"ProductMediaGalleryEntriesVideoContent contains a link to a video file and basic information about the video."
type MAGENTO_ProductMediaGalleryEntriesVideoContent {
    "Must be external-video."
    media_type: String
    "A description of the video."
    video_description: String
    "Optional data about the video."
    video_metadata: String
    "Describes the video source."
    video_provider: String
    "The title of the video."
    video_title: String
    "The URL to the video."
    video_url: String
}

"Represents a product price."
type MAGENTO_ProductPrice {
    "The price discount. Represents the difference between the regular and final price."
    discount: MAGENTO_ProductDiscount
    "The final price of the product after discounts applied."
    final_price: MAGENTO_Money!
    "The multiple FPTs that can be applied to a product price."
    fixed_product_taxes: [MAGENTO_FixedProductTax]
    "The regular price of the product."
    regular_price: MAGENTO_Money!
}

"""

ProductPrices is deprecated, replaced by PriceRange. The ProductPrices object
contains the regular price of an item, as well as its minimum and maximum
prices. Only composite products, which include bundle, configurable, and grouped
products, can contain a minimum and maximum price.
"""
type MAGENTO_ProductPrices {
    """

    The highest possible final price for all the options defined within a
    composite product. If you are specifying a price range, this would be the to value.
    """
    maximalPrice: MAGENTO_Price @deprecated(reason : "Use PriceRange.maximum_price.")
    """

    The lowest possible final price for all the options defined within a composite
    product. If you are specifying a price range, this would be the from value.
    """
    minimalPrice: MAGENTO_Price @deprecated(reason : "Use PriceRange.minimum_price.")
    "The base price of a product."
    regularPrice: MAGENTO_Price @deprecated(reason : "Use regular_price from PriceRange.minimum_price or PriceRange.maximum_price.")
}

"""

ProductTierPrices is deprecated and has been replaced by TierPrice. The
ProductTierPrices object defines a tier price, which is a quantity discount
offered to a specific customer group.
"""
type MAGENTO_ProductTierPrices {
    "The ID of the customer group."
    customer_group_id: String @deprecated(reason : "customer_group_id is not relevant for storefront.")
    "The percentage discount of the item."
    percentage_value: Float @deprecated(reason : "ProductTierPrices is deprecated. Use TierPrice.discount.")
    "The number of items that must be purchased to qualify for tier pricing."
    qty: Float @deprecated(reason : "ProductTierPrices is deprecated, use TierPrice.quantity.")
    "The price of the fixed price item."
    value: Float @deprecated(reason : "ProductTierPrices is deprecated. Use TierPrice.final_price")
    "The ID assigned to the website."
    website_id: Float @deprecated(reason : "website_id is not relevant for storefront.")
}

"Contains information about a product video."
type MAGENTO_ProductVideo implements MAGENTO_MediaGalleryInterface {
    "Whether the image is hidden from view."
    disabled: Boolean
    "The label of the product image or video."
    label: String
    "The media item's position after it has been sorted."
    position: Int
    "The URL of the product image or video."
    url: String
    "Contains a ProductMediaGalleryEntriesVideoContent object."
    video_content: MAGENTO_ProductMediaGalleryEntriesVideoContent
}

"The Products object is the top-level object returned in a product search."
type MAGENTO_Products {
    "Layered navigation aggregations."
    aggregations: [MAGENTO_Aggregation]
    "Layered navigation filters array."
    filters: [MAGENTO_LayerFilter] @deprecated(reason : "Use aggregations instead")
    "An array of products that match the specified search criteria."
    items: [MAGENTO_ProductInterface]
    "An object that includes the page_info and currentPage values specified in the query."
    page_info: MAGENTO_SearchResultPageInfo
    "An object that includes the default sort field and all available sort fields."
    sort_fields: MAGENTO_SortFields
    """

    The number of products that are marked as visible. By default, in complex
    products, parent products are visible, but their child products are not.
    """
    total_count: Int
}

type MAGENTO_Region {
    code: String
    id: Int
    name: String
}

type MAGENTO_RemoveCouponFromCartOutput {
    cart: MAGENTO_Cart
}

type MAGENTO_RemoveItemFromCartOutput {
    cart: MAGENTO_Cart!
}

type MAGENTO_ReorderItemsOutput {
    "Contains detailed information about the customer's cart."
    cart: MAGENTO_Cart!
    "An array of reordering errors."
    userInputErrors: [MAGENTO_CheckoutUserInputError]!
}

type MAGENTO_RevokeCustomerTokenOutput {
    result: Boolean!
}

"SearchResultPageInfo provides navigation for the query response"
type MAGENTO_SearchResultPageInfo {
    "Specifies which page of results to return"
    current_page: Int
    "Specifies the maximum number of items to return"
    page_size: Int
    "Total pages"
    total_pages: Int
}

type MAGENTO_SelectedBundleOption {
    id: Int!
    label: String!
    type: String!
    values: [MAGENTO_SelectedBundleOptionValue]!
}

type MAGENTO_SelectedBundleOptionValue {
    id: Int!
    label: String!
    price: Float!
    quantity: Float!
}

type MAGENTO_SelectedConfigurableOption {
    id: Int!
    option_label: String!
    value_id: Int!
    value_label: String!
}

type MAGENTO_SelectedCustomizableOption {
    id: Int!
    is_required: Boolean!
    label: String!
    sort_order: Int!
    values: [MAGENTO_SelectedCustomizableOptionValue]!
}

type MAGENTO_SelectedCustomizableOptionValue {
    id: Int!
    label: String!
    price: MAGENTO_CartItemSelectedOptionValuePrice!
    value: String!
}

type MAGENTO_SelectedPaymentMethod {
    "The payment method code"
    code: String!
    "The purchase order number."
    purchase_order_number: String
    "The payment method title."
    title: String!
}

type MAGENTO_SelectedShippingMethod {
    amount: MAGENTO_Money!
    base_amount: MAGENTO_Money @deprecated(reason : "The field should not be used on the storefront")
    carrier_code: String!
    carrier_title: String!
    method_code: String!
    method_title: String!
}

type MAGENTO_SendEmailToFriendOutput {
    recipients: [MAGENTO_SendEmailToFriendRecipient]
    sender: MAGENTO_SendEmailToFriendSender
}

type MAGENTO_SendEmailToFriendRecipient {
    email: String!
    name: String!
}

type MAGENTO_SendEmailToFriendSender {
    email: String!
    message: String!
    name: String!
}

type MAGENTO_SendFriendConfiguration {
    "Indicates whether the Email to a Friend feature is enabled."
    enabled_for_customers: Boolean!
    "Indicates whether the Email to a Friend feature is enabled for guests."
    enabled_for_guests: Boolean!
}

type MAGENTO_SetBillingAddressOnCartOutput {
    cart: MAGENTO_Cart!
}

type MAGENTO_SetGuestEmailOnCartOutput {
    cart: MAGENTO_Cart!
}

type MAGENTO_SetPaymentMethodOnCartOutput {
    cart: MAGENTO_Cart!
}

type MAGENTO_SetShippingAddressesOnCartOutput {
    cart: MAGENTO_Cart!
}

type MAGENTO_SetShippingMethodsOnCartOutput {
    cart: MAGENTO_Cart!
}

type MAGENTO_ShippingCartAddress implements MAGENTO_CartAddressInterface {
    available_shipping_methods: [MAGENTO_AvailableShippingMethod]
    cart_items: [MAGENTO_CartItemQuantity] @deprecated(reason : "`cart_items_v2` should be used instead")
    cart_items_v2: [MAGENTO_CartItemInterface]
    city: String!
    company: String
    country: MAGENTO_CartAddressCountry!
    customer_notes: String
    firstname: String!
    items_weight: Float @deprecated(reason : "This information shoud not be exposed on frontend")
    lastname: String!
    pickup_location_code: String
    postcode: String
    region: MAGENTO_CartAddressRegion
    selected_shipping_method: MAGENTO_SelectedShippingMethod
    street: [String]!
    telephone: String!
}

"Simple Cart Item"
type MAGENTO_SimpleCartItem implements MAGENTO_CartItemInterface {
    customizable_options: [MAGENTO_SelectedCustomizableOption]
    id: String!
    prices: MAGENTO_CartItemPrices
    product: MAGENTO_ProductInterface!
    quantity: Float!
}

"A simple product is tangible and are usually sold as single units or in fixed quantities."
type MAGENTO_SimpleProduct implements MAGENTO_CustomizableProductInterface & MAGENTO_PhysicalProductInterface & MAGENTO_ProductInterface {
    activity: String
    "The attribute set assigned to the product."
    attribute_set_id: Int
    """

    Relative canonical URL. This value is returned only if the system setting 'Use
    Canonical Link Meta Tag For Products' is enabled
    """
    canonical_url: String
    "The categories assigned to a product."
    categories: [MAGENTO_CategoryInterface]
    category_gear: String
    climate: String
    collar: String
    color: String
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String
    "Crosssell Products"
    crosssell_products: [MAGENTO_ProductInterface]
    "Detailed information about the product. The value can include simple HTML tags."
    description: MAGENTO_ComplexTextValue
    eco_collection: Int
    erin_recommends: Int
    features_bags: String
    format: Int
    gender: String
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int
    "The relative path to the main image on the product page."
    image: MAGENTO_ProductImage
    "A number representing the product's manufacturer."
    manufacturer: Int
    material: String
    "An array of Media Gallery objects."
    media_gallery: [MAGENTO_MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MAGENTO_MediaGalleryEntry] @deprecated(reason : "Use product's `media_gallery` instead")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "The product name. Customers use this name to identify the product."
    name: String
    new: Int
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "An array of options for a customizable product."
    options: [MAGENTO_CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    pattern: String
    performance_fabric: Int
    "A ProductPrices object, indicating the price of an item."
    price: MAGENTO_ProductPrices @deprecated(reason : "Use price_range for product price information.")
    "A PriceRange object, indicating the range of prices for the product"
    price_range: MAGENTO_PriceRange!
    "An array of TierPrice objects."
    price_tiers: [MAGENTO_TierPrice]
    "An array of ProductLinks objects."
    product_links: [MAGENTO_ProductLinksInterface]
    "Related Products"
    related_products: [MAGENTO_ProductInterface]
    sale: Int
    "A short description of the product. Its use depends on the theme."
    short_description: MAGENTO_ComplexTextValue
    size: Int
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    sleeve: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: MAGENTO_ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String
    "The discounted price of the product."
    special_price: Float
    "The end date that a product has a special price."
    special_to_date: String
    "Stock status of the product"
    stock_status: MAGENTO_ProductStockStatus
    strap_bags: String
    style_bags: String
    style_bottom: String
    style_general: String
    "The file name of a swatch image"
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: MAGENTO_ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason : "Use price_tiers for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [MAGENTO_ProductTierPrices] @deprecated(reason : "Use price_tiers for product tier price information.")
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason : "Use __typename instead.")
    "Timestamp indicating when the product was updated."
    updated_at: String
    "Upsell Products"
    upsell_products: [MAGENTO_ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason : "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [MAGENTO_UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [MAGENTO_Website] @deprecated(reason : "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

type MAGENTO_SortField {
    "Label of sort field."
    label: String
    "Attribute code of sort field."
    value: String
}

"SortFields contains a default value for sort fields and all available sort fields."
type MAGENTO_SortFields {
    "Default value of sort fields."
    default: String
    "Available sort fields."
    options: [MAGENTO_SortField]
}

"The type contains information about a store config"
type MAGENTO_StoreConfig {
    "Footer Miscellaneous HTML"
    absolute_footer: String
    "Enable autocomplete on login and forgot password forms"
    autocomplete_on_storefront: Boolean
    "Base currency code"
    base_currency_code: String
    "Base link URL for the store"
    base_link_url: String
    "Base media URL for the store"
    base_media_url: String
    "Base static URL for the store"
    base_static_url: String
    "Base URL for the store"
    base_url: String
    "Default Sort By."
    catalog_default_sort_by: String
    """

    Corresponds to the 'Display Prices In Product Lists' field. It indicates how
    FPT information is displayed on category pages
    """
    category_fixed_product_tax_display_setting: MAGENTO_FixedProductTaxDisplaySettings
    "Category URL Suffix."
    category_url_suffix: String
    "CMS Home Page"
    cms_home_page: String
    "CMS No Cookies Page"
    cms_no_cookies: String
    "CMS No Route Page"
    cms_no_route: String
    "A code assigned to the store to identify it"
    code: String
    "Copyright"
    copyright: String
    "Default Meta Description"
    default_description: String
    "Default display currency code"
    default_display_currency_code: String
    "Default Meta Keywords"
    default_keywords: String
    "Default Page Title"
    default_title: String
    "Display Demo Store Notice"
    demonotice: Int
    "Default Web URL"
    front: String
    "Products per Page on Grid Default Value."
    grid_per_page: Int
    "Products per Page on Grid Allowed Values."
    grid_per_page_values: String
    "Scripts and Style Sheets"
    head_includes: String
    "Favicon Icon"
    head_shortcut_icon: String
    "Logo Image"
    header_logo_src: String
    "The ID number assigned to the store"
    id: Int
    "List Mode."
    list_mode: String
    "Products per Page on List Default Value."
    list_per_page: Int
    "Products per Page on List Allowed Values."
    list_per_page_values: String
    "Store locale"
    locale: String
    "Logo Image Alt"
    logo_alt: String
    "Logo Attribute Height"
    logo_height: Int
    "Logo Attribute Width"
    logo_width: Int
    "The minimum number of characters required for a valid password."
    minimum_password_length: String
    "Default No-route URL"
    no_route: String
    """

    Corresponds to the 'Display Prices On Product View Page' field. It indicates
    how FPT information is displayed on product pages
    """
    product_fixed_product_tax_display_setting: MAGENTO_FixedProductTaxDisplaySettings
    "Product URL Suffix."
    product_url_suffix: String
    "The number of different character classes required in a password (lowercase, uppercase, digits, special characters)."
    required_character_classes_number: String
    "The ID of the root category"
    root_category_id: Int
    """

    Corresponds to the 'Display Prices In Sales Modules' field. It indicates how
    FPT information is displayed on cart, checkout, and order pages
    """
    sales_fixed_product_tax_display_setting: MAGENTO_FixedProductTaxDisplaySettings
    "Secure base link URL for the store"
    secure_base_link_url: String
    "Secure base media URL for the store"
    secure_base_media_url: String
    "Secure base static URL for the store"
    secure_base_static_url: String
    "Secure base URL for the store"
    secure_base_url: String
    "Email to a Friend configuration."
    send_friend: MAGENTO_SendFriendConfiguration
    "Show Breadcrumbs for CMS Pages"
    show_cms_breadcrumbs: Int
    "Name of the store"
    store_name: String
    "Timezone of the store"
    timezone: String
    "Page Title Prefix"
    title_prefix: String
    "Page Title Separator."
    title_separator: String
    "Page Title Suffix"
    title_suffix: String
    "The ID number assigned to the website store belongs"
    website_id: Int
    "The unit of weight"
    weight_unit: String
    "Welcome Text"
    welcome: String
}

type MAGENTO_SwatchData {
    "Type of swatch filter item: 1 - text, 2 - image"
    type: String
    "Value for swatch item (text or image link)"
    value: String
}

type MAGENTO_SwatchLayerFilterItem implements MAGENTO_LayerFilterItemInterface & MAGENTO_SwatchLayerFilterItemInterface {
    "Count of items by filter."
    items_count: Int @deprecated(reason : "Use AggregationOption.count instead.")
    "Filter label."
    label: String @deprecated(reason : "Use AggregationOption.label instead.")
    "Data required to render swatch filter item"
    swatch_data: MAGENTO_SwatchData
    "Value for filter request variable to be used in query."
    value_string: String @deprecated(reason : "Use AggregationOption.value instead.")
}

type MAGENTO_TextSwatchData implements MAGENTO_SwatchDataInterface {
    "Value of swatch item (HEX color code, image link or textual value)"
    value: String
}

"A price based on the quantity purchased."
type MAGENTO_TierPrice {
    "The price discount that this tier represents."
    discount: MAGENTO_ProductDiscount
    final_price: MAGENTO_Money
    "The minimum number of items that must be purchased to qualify for this price tier."
    quantity: Float
}

type MAGENTO_UpdateCartItemsOutput {
    cart: MAGENTO_Cart!
}

"The object contains URL rewrite details"
type MAGENTO_UrlRewrite {
    "Request parameters"
    parameters: [MAGENTO_HttpQueryParameter]
    "Request URL"
    url: String
}

"Virtual Cart Item"
type MAGENTO_VirtualCartItem implements MAGENTO_CartItemInterface {
    customizable_options: [MAGENTO_SelectedCustomizableOption]
    id: String!
    prices: MAGENTO_CartItemPrices
    product: MAGENTO_ProductInterface!
    quantity: Float!
}

"A virtual product is non-tangible product that does not require shipping and is not kept in inventory."
type MAGENTO_VirtualProduct implements MAGENTO_CustomizableProductInterface & MAGENTO_ProductInterface {
    activity: String
    "The attribute set assigned to the product."
    attribute_set_id: Int
    """

    Relative canonical URL. This value is returned only if the system setting 'Use
    Canonical Link Meta Tag For Products' is enabled
    """
    canonical_url: String
    "The categories assigned to a product."
    categories: [MAGENTO_CategoryInterface]
    category_gear: String
    climate: String
    collar: String
    color: String
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String
    "Crosssell Products"
    crosssell_products: [MAGENTO_ProductInterface]
    "Detailed information about the product. The value can include simple HTML tags."
    description: MAGENTO_ComplexTextValue
    eco_collection: Int
    erin_recommends: Int
    features_bags: String
    format: Int
    gender: String
    "Indicates whether a gift message is available."
    gift_message_available: String
    "The ID number assigned to the product."
    id: Int
    "The relative path to the main image on the product page."
    image: MAGENTO_ProductImage
    "A number representing the product's manufacturer."
    manufacturer: Int
    material: String
    "An array of Media Gallery objects."
    media_gallery: [MAGENTO_MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MAGENTO_MediaGalleryEntry] @deprecated(reason : "Use product's `media_gallery` instead")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    "The product name. Customers use this name to identify the product."
    name: String
    new: Int
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    "Product stock only x left count"
    only_x_left_in_stock: Float
    "An array of options for a customizable product."
    options: [MAGENTO_CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    pattern: String
    performance_fabric: Int
    "A ProductPrices object, indicating the price of an item."
    price: MAGENTO_ProductPrices @deprecated(reason : "Use price_range for product price information.")
    "A PriceRange object, indicating the range of prices for the product"
    price_range: MAGENTO_PriceRange!
    "An array of TierPrice objects."
    price_tiers: [MAGENTO_TierPrice]
    "An array of ProductLinks objects."
    product_links: [MAGENTO_ProductLinksInterface]
    "Related Products"
    related_products: [MAGENTO_ProductInterface]
    sale: Int
    "A short description of the product. Its use depends on the theme."
    short_description: MAGENTO_ComplexTextValue
    size: Int
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    sleeve: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: MAGENTO_ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String
    "The discounted price of the product."
    special_price: Float
    "The end date that a product has a special price."
    special_to_date: String
    "Stock status of the product"
    stock_status: MAGENTO_ProductStockStatus
    strap_bags: String
    style_bags: String
    style_bottom: String
    style_general: String
    "The file name of a swatch image"
    swatch_image: String
    "The relative path to the product's thumbnail image."
    thumbnail: MAGENTO_ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason : "Use price_tiers for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [MAGENTO_ProductTierPrices] @deprecated(reason : "Use price_tiers for product tier price information.")
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason : "Use __typename instead.")
    "Timestamp indicating when the product was updated."
    updated_at: String
    "Upsell Products"
    upsell_products: [MAGENTO_ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason : "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [MAGENTO_UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [MAGENTO_Website] @deprecated(reason : "The field should not be used on the storefront.")
}

"Website is deprecated because it is should not be used on storefront. The type contains information about a website"
type MAGENTO_Website {
    "A code assigned to the website to identify it"
    code: String @deprecated(reason : "The field should not be used on the storefront.")
    "The default group ID that the website has"
    default_group_id: String @deprecated(reason : "The field should not be used on the storefront.")
    "The ID number assigned to the website"
    id: Int @deprecated(reason : "The field should not be used on the storefront.")
    "Specifies if this is the default website"
    is_default: Boolean @deprecated(reason : "The field should not be used on the storefront.")
    "The website name. Websites use this name to identify it easier."
    name: String @deprecated(reason : "The field should not be used on the storefront.")
    "The attribute to use for sorting websites"
    sort_order: Int @deprecated(reason : "The field should not be used on the storefront.")
}

type MAGENTO_Wishlist {
    "Wishlist unique identifier"
    id: ID
    "An array of items in the customer's wish list"
    items: [MAGENTO_WishlistItem]
    "The number of items in the wish list"
    items_count: Int
    "An encrypted code that Magento uses to link to the wish list"
    sharing_code: String
    "The time of the last modification to the wish list"
    updated_at: String
}

type MAGENTO_WishlistItem {
    "The time when the customer added the item to the wish list"
    added_at: String
    "The customer's comment about this item"
    description: String
    "The wish list item ID"
    id: Int
    product: MAGENTO_ProductInterface
    "The quantity of this wish list item"
    qty: Float
}

"Deprecated: `Wishlist` type should be used instead"
type MAGENTO_WishlistOutput {
    "An array of items in the customer's wish list"
    items: [MAGENTO_WishlistItem] @deprecated(reason : "Use field `items` from type `Wishlist` instead")
    "The number of items in the wish list"
    items_count: Int @deprecated(reason : "Use field `items_count` from type `Wishlist` instead")
    "When multiple wish lists are enabled, the name the customer assigns to the wishlist"
    name: String @deprecated(reason : "This field is related to Commerce functionality and is always `null` in Open Source edition")
    "An encrypted code that Magento uses to link to the wish list"
    sharing_code: String @deprecated(reason : "Use field `sharing_code` from type `Wishlist` instead")
    "The time of the last modification to the wish list"
    updated_at: String @deprecated(reason : "Use field `updated_at` from type `Wishlist` instead")
}

type PageInfo {
    currentPage: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    itemCount: Int!
    pageCount: Int!
    perPage: Int
    totalCount: Int!
}

type Query {
    allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: DirectorySortInput): DirectoryConnection!
    allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: FileSortInput): FileConnection!
    allGraphQlSource(filter: GraphQLSourceFilterInput, limit: Int, skip: Int, sort: GraphQLSourceSortInput): GraphQLSourceConnection!
    allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: ImageSharpSortInput): ImageSharpConnection!
    allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: SiteSortInput): SiteConnection!
    allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: SiteBuildMetadataSortInput): SiteBuildMetadataConnection!
    allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: SitePageSortInput): SitePageConnection!
    allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: SitePluginSortInput): SitePluginConnection!
    directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
    file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
    graphQlSource(children: NodeFilterListInput, fieldName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, typeName: StringQueryOperatorInput): GraphQLSource
    imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput, resolutions: ImageSharpResolutionsFilterInput, sizes: ImageSharpSizesFilterInput): ImageSharp
    magento: MAGENTO!
    site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput): Site
    siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
    sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, componentPath: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, matchPath: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput): SitePage
    sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
}

type Site implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    host: String
    id: ID!
    internal: Internal!
    parent: Node
    pathPrefix: String
    polyfill: Boolean
    port: Int
    siteMetadata: SiteSiteMetadata
}

type SiteBuildMetadata implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

type SiteBuildMetadataConnection {
    distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
    edges: [SiteBuildMetadataEdge!]!
    group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteBuildMetadataEdge {
    next: SiteBuildMetadata
    node: SiteBuildMetadata!
    previous: SiteBuildMetadata
}

type SiteBuildMetadataGroupConnection {
    edges: [SiteBuildMetadataEdge!]!
    field: String!
    fieldValue: String
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteConnection {
    distinct(field: SiteFieldsEnum!): [String!]!
    edges: [SiteEdge!]!
    group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
    nodes: [Site!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteEdge {
    next: Site
    node: Site!
    previous: Site
}

type SiteGroupConnection {
    edges: [SiteEdge!]!
    field: String!
    fieldValue: String
    nodes: [Site!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePage implements Node {
    children: [Node!]!
    component: String!
    componentChunkName: String!
    componentPath: String
    id: ID!
    internal: Internal!
    internalComponentName: String!
    isCreatedByStatefulCreatePages: Boolean
    matchPath: String
    parent: Node
    path: String!
    pluginCreator: SitePlugin
    pluginCreatorId: String
}

type SitePageConnection {
    distinct(field: SitePageFieldsEnum!): [String!]!
    edges: [SitePageEdge!]!
    group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePageEdge {
    next: SitePage
    node: SitePage!
    previous: SitePage
}

type SitePageGroupConnection {
    edges: [SitePageEdge!]!
    field: String!
    fieldValue: String
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePlugin implements Node {
    browserAPIs: [String]
    children: [Node!]!
    id: ID!
    internal: Internal!
    name: String
    nodeAPIs: [String]
    packageJson: SitePluginPackageJson
    parent: Node
    pluginFilepath: String
    pluginOptions: SitePluginPluginOptions
    resolve: String
    ssrAPIs: [String]
    version: String
}

type SitePluginConnection {
    distinct(field: SitePluginFieldsEnum!): [String!]!
    edges: [SitePluginEdge!]!
    group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePluginEdge {
    next: SitePlugin
    node: SitePlugin!
    previous: SitePlugin
}

type SitePluginGroupConnection {
    edges: [SitePluginEdge!]!
    field: String!
    fieldValue: String
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePluginPackageJson {
    dependencies: [SitePluginPackageJsonDependencies]
    description: String
    devDependencies: [SitePluginPackageJsonDevDependencies]
    keywords: [String]
    license: String
    main: String
    name: String
    peerDependencies: [SitePluginPackageJsonPeerDependencies]
    version: String
}

type SitePluginPackageJsonDependencies {
    name: String
    version: String
}

type SitePluginPackageJsonDevDependencies {
    name: String
    version: String
}

type SitePluginPackageJsonPeerDependencies {
    name: String
    version: String
}

type SitePluginPluginOptions {
    allExtensions: Boolean
    background_color: String
    cacheDigest: String
    cache_busting_mode: String
    display: String
    fieldName: String
    icon: String
    include_favicon: Boolean
    isTSX: Boolean
    jsxPragma: String
    legacy: Boolean
    name: String
    path: String
    pathCheck: Boolean
    short_name: String
    start_url: String
    theme_color: String
    theme_color_in_head: Boolean
    typeName: String
    url: String
}

type SiteSiteMetadata {
    author: String
    description: String
    title: String
}

enum DirectoryFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum FileFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    childImageSharp___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    publicURL
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum GraphQLSourceFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    fieldName
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    typeName
}

enum ImageCropFocus {
    ATTENTION
    CENTER
    EAST
    ENTROPY
    NORTH
    NORTHEAST
    NORTHWEST
    SOUTH
    SOUTHEAST
    SOUTHWEST
    WEST
}

enum ImageFit {
    CONTAIN
    COVER
    FILL
    INSIDE
    OUTSIDE
}

enum ImageFormat {
    JPG
    NO_CHANGE
    PNG
    WEBP
}

enum ImageSharpFieldsEnum {
    children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
}

enum MAGENTO_CheckoutAgreementMode {
    AUTO
    MANUAL
}

enum MAGENTO_CheckoutUserInputErrorCodes {
    INSUFFICIENT_STOCK
    NOT_SALABLE
    PRODUCT_NOT_FOUND
    REORDER_NOT_AVAILABLE
    UNDEFINED
}

"The list of countries codes"
enum MAGENTO_CountryCodeEnum {
    "Andorra"
    AD
    "United Arab Emirates"
    AE
    "Afghanistan"
    AF
    "Antigua & Barbuda"
    AG
    "Anguilla"
    AI
    "Albania"
    AL
    "Armenia"
    AM
    "Netherlands Antilles"
    AN
    "Angola"
    AO
    "Antarctica"
    AQ
    "Argentina"
    AR
    "American Samoa"
    AS
    "Austria"
    AT
    "Australia"
    AU
    "Aruba"
    AW
    "Åland Islands"
    AX
    "Azerbaijan"
    AZ
    "Bosnia & Herzegovina"
    BA
    "Barbados"
    BB
    "Bangladesh"
    BD
    "Belgium"
    BE
    "Burkina Faso"
    BF
    "Bulgaria"
    BG
    "Bahrain"
    BH
    "Burundi"
    BI
    "Benin"
    BJ
    "St. Barthélemy"
    BL
    "Bermuda"
    BM
    "Brunei"
    BN
    "Bolivia"
    BO
    "Brazil"
    BR
    "Bahamas"
    BS
    "Bhutan"
    BT
    "Bouvet Island"
    BV
    "Botswana"
    BW
    "Belarus"
    BY
    "Belize"
    BZ
    "Canada"
    CA
    "Cocos (Keeling) Islands"
    CC
    "Congo-Kinshasa"
    CD
    "Central African Republic"
    CF
    "Congo-Brazzaville"
    CG
    "Switzerland"
    CH
    "Côte d’Ivoire"
    CI
    "Cook Islands"
    CK
    "Chile"
    CL
    "Cameroon"
    CM
    "China"
    CN
    "Colombia"
    CO
    "Costa Rica"
    CR
    "Cuba"
    CU
    "Cape Verde"
    CV
    "Christmas Island"
    CX
    "Cyprus"
    CY
    "Czech Republic"
    CZ
    "Germany"
    DE
    "Djibouti"
    DJ
    "Denmark"
    DK
    "Dominica"
    DM
    "Dominican Republic"
    DO
    "Algeria"
    DZ
    "Ecuador"
    EC
    "Estonia"
    EE
    "Egypt"
    EG
    "Western Sahara"
    EH
    "Eritrea"
    ER
    "Spain"
    ES
    "Ethiopia"
    ET
    "Finland"
    FI
    "Fiji"
    FJ
    "Falkland Islands"
    FK
    "Micronesia"
    FM
    "Faroe Islands"
    FO
    "France"
    FR
    "Gabon"
    GA
    "United Kingdom"
    GB
    "Grenada"
    GD
    "Georgia"
    GE
    "French Guiana"
    GF
    "Guernsey"
    GG
    "Ghana"
    GH
    "Gibraltar"
    GI
    "Greenland"
    GL
    "Gambia"
    GM
    "Guinea"
    GN
    "Guadeloupe"
    GP
    "Equatorial Guinea"
    GQ
    "Greece"
    GR
    "South Georgia & South Sandwich Islands"
    GS
    "Guatemala"
    GT
    "Guam"
    GU
    "Guinea-Bissau"
    GW
    "Guyana"
    GY
    "Hong Kong SAR China"
    HK
    "Heard &amp; McDonald Islands"
    HM
    "Honduras"
    HN
    "Croatia"
    HR
    "Haiti"
    HT
    "Hungary"
    HU
    "Indonesia"
    ID
    "Ireland"
    IE
    "Israel"
    IL
    "Isle of Man"
    IM
    "India"
    IN
    "British Indian Ocean Territory"
    IO
    "Iraq"
    IQ
    "Iran"
    IR
    "Iceland"
    IS
    "Italy"
    IT
    "Jersey"
    JE
    "Jamaica"
    JM
    "Jordan"
    JO
    "Japan"
    JP
    "Kenya"
    KE
    "Kyrgyzstan"
    KG
    "Cambodia"
    KH
    "Kiribati"
    KI
    "Comoros"
    KM
    "St. Kitts & Nevis"
    KN
    "North Korea"
    KP
    "South Korea"
    KR
    "Kuwait"
    KW
    "Cayman Islands"
    KY
    "Kazakhstan"
    KZ
    "Laos"
    LA
    "Lebanon"
    LB
    "St. Lucia"
    LC
    "Liechtenstein"
    LI
    "Sri Lanka"
    LK
    "Liberia"
    LR
    "Lesotho"
    LS
    "Lithuania"
    LT
    "Luxembourg"
    LU
    "Latvia"
    LV
    "Libya"
    LY
    "Morocco"
    MA
    "Monaco"
    MC
    "Moldova"
    MD
    "Montenegro"
    ME
    "St. Martin"
    MF
    "Madagascar"
    MG
    "Marshall Islands"
    MH
    "Macedonia"
    MK
    "Mali"
    ML
    "Myanmar (Burma)"
    MM
    "Mongolia"
    MN
    "Macau SAR China"
    MO
    "Northern Mariana Islands"
    MP
    "Martinique"
    MQ
    "Mauritania"
    MR
    "Montserrat"
    MS
    "Malta"
    MT
    "Mauritius"
    MU
    "Maldives"
    MV
    "Malawi"
    MW
    "Mexico"
    MX
    "Malaysia"
    MY
    "Mozambique"
    MZ
    "Namibia"
    NA
    "New Caledonia"
    NC
    "Niger"
    NE
    "Norfolk Island"
    NF
    "Nigeria"
    NG
    "Nicaragua"
    NI
    "Netherlands"
    NL
    "Norway"
    NO
    "Nepal"
    NP
    "Nauru"
    NR
    "Niue"
    NU
    "New Zealand"
    NZ
    "Oman"
    OM
    "Panama"
    PA
    "Peru"
    PE
    "French Polynesia"
    PF
    "Papua New Guinea"
    PG
    "Philippines"
    PH
    "Pakistan"
    PK
    "Poland"
    PL
    "St. Pierre & Miquelon"
    PM
    "Pitcairn Islands"
    PN
    "Palestinian Territories"
    PS
    "Portugal"
    PT
    "Palau"
    PW
    "Paraguay"
    PY
    "Qatar"
    QA
    "Réunion"
    RE
    "Romania"
    RO
    "Serbia"
    RS
    "Russia"
    RU
    "Rwanda"
    RW
    "Saudi Arabia"
    SA
    "Solomon Islands"
    SB
    "Seychelles"
    SC
    "Sudan"
    SD
    "Sweden"
    SE
    "Singapore"
    SG
    "St. Helena"
    SH
    "Slovenia"
    SI
    "Svalbard & Jan Mayen"
    SJ
    "Slovakia"
    SK
    "Sierra Leone"
    SL
    "San Marino"
    SM
    "Senegal"
    SN
    "Somalia"
    SO
    "Suriname"
    SR
    "São Tomé & Príncipe"
    ST
    "El Salvador"
    SV
    "Syria"
    SY
    "Swaziland"
    SZ
    "Turks & Caicos Islands"
    TC
    "Chad"
    TD
    "French Southern Territories"
    TF
    "Togo"
    TG
    "Thailand"
    TH
    "Tajikistan"
    TJ
    "Tokelau"
    TK
    "Timor-Leste"
    TL
    "Turkmenistan"
    TM
    "Tunisia"
    TN
    "Tonga"
    TO
    "Turkey"
    TR
    "Trinidad & Tobago"
    TT
    "Tuvalu"
    TV
    "Taiwan"
    TW
    "Tanzania"
    TZ
    "Ukraine"
    UA
    "Uganda"
    UG
    "U.S. Outlying Islands"
    UM
    "United States"
    US
    "Uruguay"
    UY
    "Uzbekistan"
    UZ
    "Vatican City"
    VA
    "St. Vincent & Grenadines"
    VC
    "Venezuela"
    VE
    "British Virgin Islands"
    VG
    "U.S. Virgin Islands"
    VI
    "Vietnam"
    VN
    "Vanuatu"
    VU
    "Wallis & Futuna"
    WF
    "Samoa"
    WS
    "Yemen"
    YE
    "Mayotte"
    YT
    "South Africa"
    ZA
    "Zambia"
    ZM
    "Zimbabwe"
    ZW
}

"The list of available currency codes"
enum MAGENTO_CurrencyEnum {
    AED
    AFN
    ALL
    AMD
    ANG
    AOA
    ARS
    AUD
    AWG
    AZM
    AZN
    BAM
    BBD
    BDT
    BGN
    BHD
    BIF
    BMD
    BND
    BOB
    BRL
    BSD
    BTN
    BUK
    BWP
    BYN
    BZD
    CAD
    CDF
    CHE
    CHF
    CHW
    CLP
    CNY
    COP
    CRC
    CUP
    CVE
    CZK
    DJF
    DKK
    DOP
    DZD
    EEK
    EGP
    ERN
    ETB
    EUR
    FJD
    FKP
    GBP
    GEK
    GEL
    GHS
    GIP
    GMD
    GNF
    GQE
    GTQ
    GYD
    HKD
    HNL
    HRK
    HTG
    HUF
    IDR
    ILS
    INR
    IQD
    IRR
    ISK
    JMD
    JOD
    JPY
    KES
    KGS
    KHR
    KMF
    KPW
    KRW
    KWD
    KYD
    KZT
    LAK
    LBP
    LKR
    LRD
    LSL
    LSM
    LTL
    LVL
    LYD
    MAD
    MDL
    MGA
    MKD
    MMK
    MNT
    MOP
    MRO
    MUR
    MVR
    MWK
    MXN
    MYR
    MZN
    NAD
    NGN
    NIC
    NOK
    NPR
    NZD
    OMR
    PAB
    PEN
    PGK
    PHP
    PKR
    PLN
    PYG
    QAR
    RHD
    ROL
    RON
    RSD
    RUB
    RWF
    SAR
    SBD
    SCR
    SDG
    SEK
    SGD
    SHP
    SKK
    SLL
    SOS
    SRD
    STD
    SVC
    SYP
    SZL
    THB
    TJS
    TMM
    TND
    TOP
    TRL
    TRY
    TTD
    TWD
    TZS
    UAH
    UGX
    USD
    UYU
    UZS
    VEB
    VEF
    VND
    VUV
    WST
    XCD
    XOF
    XPF
    YER
    YTL
    ZAR
    ZMK
    ZWD
}

enum MAGENTO_DownloadableFileTypeEnum {
    FILE @deprecated(reason : "`sample_url` serves to get the downloadable sample")
    URL @deprecated(reason : "`sample_url` serves to get the downloadable sample")
}

"This enumeration display settings for the fixed product tax"
enum MAGENTO_FixedProductTaxDisplaySettings {
    """

    The displayed price does not include the FPT amount. The values of
    ProductPrice.fixed_product_taxes and the price including the FPT are displayed
    separately. This value corresponds to 'Excluding FPT, Including FPT
    description and final price'
    """
    EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS
    """

    The displayed price does not include the FPT amount. The values from
    ProductPrice.fixed_product_taxes are not displayed. This value corresponds to
    'Excluding FPT'
    """
    EXCLUDE_FPT_WITHOUT_DETAILS
    "The FPT feature is not enabled. You can omit  ProductPrice.fixed_product_taxes from your query"
    FPT_DISABLED
    """

    The displayed price includes the FPT amount without displaying the
    ProductPrice.fixed_product_taxes values. This value corresponds to 'Including FPT only'
    """
    INCLUDE_FPT_WITHOUT_DETAILS
    """

    The displayed price includes the FPT amount while displaying the values of
    ProductPrice.fixed_product_taxes separately. This value corresponds to
    'Including FPT and FPT description'
    """
    INCLUDE_FPT_WITH_DETAILS
}

"Mode for payment: TEST or LIVE. Applies to Payflow Link and Payments Advanced payment methods."
enum MAGENTO_PayflowLinkMode {
    LIVE
    TEST
}

"The list of available payment token types"
enum MAGENTO_PaymentTokenTypeEnum {
    account
    card
}

"PriceAdjustment.code is deprecated. This enumeration contains values defined in modules other than the Catalog module."
enum MAGENTO_PriceAdjustmentCodesEnum {
    TAX @deprecated(reason : "PriceAdjustmentCodesEnum is deprecated. Tax is included or excluded in price. Tax is not shown separtely in Catalog")
    WEEE @deprecated(reason : "WEEE code is deprecated, use fixed_product_taxes.label")
    WEEE_TAX @deprecated(reason : "Use fixed_product_taxes. PriceAdjustmentCodesEnum is deprecated. Tax is included or excluded in price. Tax is not shown separtely in Catalog")
}

"PriceAdjustmentDescriptionEnum is deprecated. This enumeration states whether a price adjustment is included or excluded."
enum MAGENTO_PriceAdjustmentDescriptionEnum {
    EXCLUDED
    INCLUDED
}

"This enumeration the price type."
enum MAGENTO_PriceTypeEnum {
    DYNAMIC
    FIXED
    PERCENT
}

"This enumeration defines whether a bundle product's price is displayed as the lowest possible value or as a range."
enum MAGENTO_PriceViewEnum {
    AS_LOW_AS
    PRICE_RANGE
}

"This enumeration states whether a product stock status is in stock or out of stock"
enum MAGENTO_ProductStockStatus {
    IN_STOCK
    OUT_OF_STOCK
}

"This enumeration defines whether bundle items must be shipped together."
enum MAGENTO_ShipBundleItemsEnum {
    SEPARATELY
    TOGETHER
}

"This enumeration indicates whether to return results in ascending or descending order"
enum MAGENTO_SortEnum {
    ASC
    DESC
}

"This enumeration defines the entity type."
enum MAGENTO_UrlRewriteEntityTypeEnum {
    CATEGORY
    CMS_PAGE
    PRODUCT
}

enum PotraceTurnPolicy {
    TURNPOLICY_BLACK
    TURNPOLICY_LEFT
    TURNPOLICY_MAJORITY
    TURNPOLICY_MINORITY
    TURNPOLICY_RIGHT
    TURNPOLICY_WHITE
}

enum SiteBuildMetadataFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
}

enum SiteFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    host
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pathPrefix
    polyfill
    port
    siteMetadata___author
    siteMetadata___description
    siteMetadata___title
}

enum SitePageFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    component
    componentChunkName
    componentPath
    id
    internalComponentName
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    isCreatedByStatefulCreatePages
    matchPath
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    path
    pluginCreatorId
    pluginCreator___browserAPIs
    pluginCreator___children
    pluginCreator___children___children
    pluginCreator___children___children___children
    pluginCreator___children___children___id
    pluginCreator___children___id
    pluginCreator___children___internal___content
    pluginCreator___children___internal___contentDigest
    pluginCreator___children___internal___description
    pluginCreator___children___internal___fieldOwners
    pluginCreator___children___internal___ignoreType
    pluginCreator___children___internal___mediaType
    pluginCreator___children___internal___owner
    pluginCreator___children___internal___type
    pluginCreator___children___parent___children
    pluginCreator___children___parent___id
    pluginCreator___id
    pluginCreator___internal___content
    pluginCreator___internal___contentDigest
    pluginCreator___internal___description
    pluginCreator___internal___fieldOwners
    pluginCreator___internal___ignoreType
    pluginCreator___internal___mediaType
    pluginCreator___internal___owner
    pluginCreator___internal___type
    pluginCreator___name
    pluginCreator___nodeAPIs
    pluginCreator___packageJson___dependencies
    pluginCreator___packageJson___dependencies___name
    pluginCreator___packageJson___dependencies___version
    pluginCreator___packageJson___description
    pluginCreator___packageJson___devDependencies
    pluginCreator___packageJson___devDependencies___name
    pluginCreator___packageJson___devDependencies___version
    pluginCreator___packageJson___keywords
    pluginCreator___packageJson___license
    pluginCreator___packageJson___main
    pluginCreator___packageJson___name
    pluginCreator___packageJson___peerDependencies
    pluginCreator___packageJson___peerDependencies___name
    pluginCreator___packageJson___peerDependencies___version
    pluginCreator___packageJson___version
    pluginCreator___parent___children
    pluginCreator___parent___children___children
    pluginCreator___parent___children___id
    pluginCreator___parent___id
    pluginCreator___parent___internal___content
    pluginCreator___parent___internal___contentDigest
    pluginCreator___parent___internal___description
    pluginCreator___parent___internal___fieldOwners
    pluginCreator___parent___internal___ignoreType
    pluginCreator___parent___internal___mediaType
    pluginCreator___parent___internal___owner
    pluginCreator___parent___internal___type
    pluginCreator___parent___parent___children
    pluginCreator___parent___parent___id
    pluginCreator___pluginFilepath
    pluginCreator___pluginOptions___allExtensions
    pluginCreator___pluginOptions___background_color
    pluginCreator___pluginOptions___cacheDigest
    pluginCreator___pluginOptions___cache_busting_mode
    pluginCreator___pluginOptions___display
    pluginCreator___pluginOptions___fieldName
    pluginCreator___pluginOptions___icon
    pluginCreator___pluginOptions___include_favicon
    pluginCreator___pluginOptions___isTSX
    pluginCreator___pluginOptions___jsxPragma
    pluginCreator___pluginOptions___legacy
    pluginCreator___pluginOptions___name
    pluginCreator___pluginOptions___path
    pluginCreator___pluginOptions___pathCheck
    pluginCreator___pluginOptions___short_name
    pluginCreator___pluginOptions___start_url
    pluginCreator___pluginOptions___theme_color
    pluginCreator___pluginOptions___theme_color_in_head
    pluginCreator___pluginOptions___typeName
    pluginCreator___pluginOptions___url
    pluginCreator___resolve
    pluginCreator___ssrAPIs
    pluginCreator___version
}

enum SitePluginFieldsEnum {
    browserAPIs
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    name
    nodeAPIs
    packageJson___dependencies
    packageJson___dependencies___name
    packageJson___dependencies___version
    packageJson___description
    packageJson___devDependencies
    packageJson___devDependencies___name
    packageJson___devDependencies___version
    packageJson___keywords
    packageJson___license
    packageJson___main
    packageJson___name
    packageJson___peerDependencies
    packageJson___peerDependencies___name
    packageJson___peerDependencies___version
    packageJson___version
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pluginFilepath
    pluginOptions___allExtensions
    pluginOptions___background_color
    pluginOptions___cacheDigest
    pluginOptions___cache_busting_mode
    pluginOptions___display
    pluginOptions___fieldName
    pluginOptions___icon
    pluginOptions___include_favicon
    pluginOptions___isTSX
    pluginOptions___jsxPragma
    pluginOptions___legacy
    pluginOptions___name
    pluginOptions___path
    pluginOptions___pathCheck
    pluginOptions___short_name
    pluginOptions___start_url
    pluginOptions___theme_color
    pluginOptions___theme_color_in_head
    pluginOptions___typeName
    pluginOptions___url
    resolve
    ssrAPIs
    version
}

enum SortOrderEnum {
    ASC
    DESC
}

input BooleanQueryOperatorInput {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input DateQueryOperatorInput {
    eq: Date
    gt: Date
    gte: Date
    in: [Date]
    lt: Date
    lte: Date
    ne: Date
    nin: [Date]
}

input DirectoryFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    children: NodeFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input DirectorySortInput {
    fields: [DirectoryFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
    highlight: String!
    opacity: Int
    shadow: String!
}

input FileFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    childImageSharp: ImageSharpFilterInput
    children: NodeFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    publicURL: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input FileSortInput {
    fields: [FileFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input GraphQLSourceFilterInput {
    children: NodeFilterListInput
    fieldName: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    typeName: StringQueryOperatorInput
}

input GraphQLSourceSortInput {
    fields: [GraphQLSourceFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input ImageSharpFilterInput {
    children: NodeFilterListInput
    fixed: ImageSharpFixedFilterInput
    fluid: ImageSharpFluidFilterInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    original: ImageSharpOriginalFilterInput
    parent: NodeFilterInput
    resize: ImageSharpResizeFilterInput
    resolutions: ImageSharpResolutionsFilterInput
    sizes: ImageSharpSizesFilterInput
}

input ImageSharpFixedFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpFluidFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    originalImg: StringQueryOperatorInput
    originalName: StringQueryOperatorInput
    presentationHeight: IntQueryOperatorInput
    presentationWidth: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input ImageSharpOriginalFilterInput {
    height: FloatQueryOperatorInput
    src: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpResizeFilterInput {
    aspectRatio: FloatQueryOperatorInput
    height: IntQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: IntQueryOperatorInput
}

input ImageSharpResolutionsFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpSizesFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    originalImg: StringQueryOperatorInput
    originalName: StringQueryOperatorInput
    presentationHeight: IntQueryOperatorInput
    presentationWidth: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input ImageSharpSortInput {
    fields: [ImageSharpFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input IntQueryOperatorInput {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input InternalFilterInput {
    content: StringQueryOperatorInput
    contentDigest: StringQueryOperatorInput
    description: StringQueryOperatorInput
    fieldOwners: StringQueryOperatorInput
    ignoreType: BooleanQueryOperatorInput
    mediaType: StringQueryOperatorInput
    owner: StringQueryOperatorInput
    type: StringQueryOperatorInput
}

input MAGENTO_AddBundleProductsToCartInput {
    cart_id: String!
    cart_items: [MAGENTO_BundleProductCartItemInput]!
}

input MAGENTO_AddConfigurableProductsToCartInput {
    cart_id: String!
    cart_items: [MAGENTO_ConfigurableProductCartItemInput]!
}

input MAGENTO_AddDownloadableProductsToCartInput {
    cart_id: String!
    cart_items: [MAGENTO_DownloadableProductCartItemInput]!
}

input MAGENTO_AddSimpleProductsToCartInput {
    cart_id: String!
    cart_items: [MAGENTO_SimpleProductCartItemInput]!
}

input MAGENTO_AddVirtualProductsToCartInput {
    cart_id: String!
    cart_items: [MAGENTO_VirtualProductCartItemInput]!
}

input MAGENTO_ApplyCouponToCartInput {
    cart_id: String!
    coupon_code: String!
}

"AreaInput defines the parameters which will be used for filter by specified location."
input MAGENTO_AreaInput {
    "The radius for the search in KM."
    radius: Int!
    "The country code where search must be performed. Required parameter together with region, city or postcode."
    search_term: String!
}

"AttributeInput specifies the attribute_code and entity_type to search"
input MAGENTO_AttributeInput {
    "The unique identifier for an attribute code. This value should be in lowercase letters without spaces."
    attribute_code: String
    "The type of entity that defines the attribute"
    entity_type: String
}

input MAGENTO_BillingAddressInput {
    address: MAGENTO_CartAddressInput
    customer_address_id: Int
    "Set billing address same as shipping"
    same_as_shipping: Boolean
    "Deprecated: use `same_as_shipping` field instead"
    use_for_shipping: Boolean
}

input MAGENTO_BraintreeCcVaultInput {
    device_data: String
    public_hash: String!
}

input MAGENTO_BraintreeInput {
    """

    Contains a fingerprint provided by Braintree JS SDK and should be sent with
    sale transaction details to the Braintree payment gateway. Should be specified
    only in a case if Kount (advanced fraud protection) is enabled for Braintree
    payment integration.
    """
    device_data: String
    """

    States whether an entered by a customer credit/debit card should be tokenized
    for later usage. Required only if Vault is enabled for Braintree payment integration.
    """
    is_active_payment_token_enabler: Boolean!
    """

    The one-time payment token generated by Braintree payment gateway based on
    card details. Required field to make sale transaction.
    """
    payment_method_nonce: String!
}

input MAGENTO_BundleOptionInput {
    id: Int!
    quantity: Float!
    value: [String]!
}

input MAGENTO_BundleProductCartItemInput {
    bundle_options: [MAGENTO_BundleOptionInput]!
    customizable_options: [MAGENTO_CustomizableOptionInput]
    data: MAGENTO_CartItemInput!
}

input MAGENTO_CartAddressInput {
    city: String!
    company: String
    country_code: String!
    firstname: String!
    lastname: String!
    postcode: String
    region: String
    region_id: Int
    "Determines whether to save the address in the customer's address book. The default value is true"
    save_in_address_book: Boolean
    street: [String]!
    telephone: String!
}

input MAGENTO_CartItemInput {
    quantity: Float!
    sku: String!
}

input MAGENTO_CartItemUpdateInput {
    cart_item_id: Int!
    customizable_options: [MAGENTO_CustomizableOptionInput]
    quantity: Float
}

"""

CategoryFilterInput defines the filters to be used in the search. A filter
contains at least one attribute, a comparison operator, and the value that is
being searched for.
"""
input MAGENTO_CategoryFilterInput {
    "Filter by category ID that uniquely identifies the category."
    ids: MAGENTO_FilterEqualTypeInput
    "Filter by the display name of the category."
    name: MAGENTO_FilterMatchTypeInput
    "Filter by the part of the URL that identifies the category."
    url_key: MAGENTO_FilterEqualTypeInput
    "Filter by the URL path for the category."
    url_path: MAGENTO_FilterEqualTypeInput
}

input MAGENTO_ConfigurableProductCartItemInput {
    customizable_options: [MAGENTO_CustomizableOptionInput]
    data: MAGENTO_CartItemInput!
    "Configurable product SKU."
    parent_sku: String
    variant_sku: String
}

"Required fields for Payflow Pro and Payments Pro credit card payments"
input MAGENTO_CreditCardDetailsInput {
    "Credit card expiration month"
    cc_exp_month: Int!
    "Credit card expiration year"
    cc_exp_year: Int!
    "Last 4 digits of the credit card"
    cc_last_4: Int!
    "Credit card type"
    cc_type: String!
}

input MAGENTO_CustomerAddressAttributeInput {
    "Attribute code"
    attribute_code: String!
    "Attribute value"
    value: String!
}

input MAGENTO_CustomerAddressInput {
    "The city or town"
    city: String
    "The customer's company"
    company: String
    "The customer's country"
    country_code: MAGENTO_CountryCodeEnum
    "Deprecated: use `country_code` instead."
    country_id: MAGENTO_CountryCodeEnum
    "Deprecated: Custom attributes should not be put into container."
    custom_attributes: [MAGENTO_CustomerAddressAttributeInput]
    "Indicates whether the address is the default billing address"
    default_billing: Boolean
    "Indicates whether the address is the default shipping address"
    default_shipping: Boolean
    "The fax number"
    fax: String
    "The first name of the person associated with the shipping/billing address"
    firstname: String
    "The family name of the person associated with the shipping/billing address"
    lastname: String
    "The middle name of the person associated with the shipping/billing address"
    middlename: String
    "The customer's ZIP or postal code"
    postcode: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "An object containing the region name, region code, and region ID"
    region: MAGENTO_CustomerAddressRegionInput
    "An array of strings that define the street number and name"
    street: [String]
    "A value such as Sr., Jr., or III"
    suffix: String
    "The telephone number"
    telephone: String
    "The customer's Tax/VAT number (for corporate customers)"
    vat_id: String
}

"CustomerAddressRegionInput defines the customer's state or province"
input MAGENTO_CustomerAddressRegionInput {
    "The state or province name"
    region: String
    "The address region code"
    region_code: String
    "The unique ID for a pre-defined region"
    region_id: Int
}

input MAGENTO_CustomerInput {
    "The customer's date of birth"
    date_of_birth: String
    "Deprecated: Use `date_of_birth` instead"
    dob: String
    "The customer's email address. Required for customer creation"
    email: String
    "The customer's first name"
    firstname: String
    "The customer's gender (Male - 1, Female - 2)"
    gender: Int
    "Indicates whether the customer is subscribed to the company's newsletter"
    is_subscribed: Boolean
    "The customer's family name"
    lastname: String
    "The customer's middle name"
    middlename: String
    "The customer's password"
    password: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "A value such as Sr., Jr., or III"
    suffix: String
    "The customer's Tax/VAT number (for corporate customers)"
    taxvat: String
}

input MAGENTO_CustomizableOptionInput {
    id: Int!
    value_string: String!
}

input MAGENTO_DownloadableProductCartItemInput {
    customizable_options: [MAGENTO_CustomizableOptionInput]
    data: MAGENTO_CartItemInput!
    downloadable_product_links: [MAGENTO_DownloadableProductLinksInput]
}

input MAGENTO_DownloadableProductLinksInput {
    link_id: Int!
}

"Defines a filter that matches the input exactly."
input MAGENTO_FilterEqualTypeInput {
    "A string to filter on"
    eq: String
    "An array of values to filter on"
    in: [String]
}

"Defines a filter that performs a fuzzy search."
input MAGENTO_FilterMatchTypeInput {
    "One or more words to filter on"
    match: String
}

"Defines a filter that matches a range of values, such as prices or dates."
input MAGENTO_FilterRangeTypeInput {
    "The beginning of the range"
    from: String
    "The end of the range"
    to: String
}

"FilterTypeInput specifies which action will be performed in a query "
input MAGENTO_FilterTypeInput {
    "Equals"
    eq: String
    finset: [String]
    "From. Must be used with 'to'"
    from: String
    "Greater than"
    gt: String
    "Greater than or equal to"
    gteq: String
    "In. The value can contain a set of comma-separated values"
    in: [String]
    "Like. The specified value can contain % (percent signs) to allow matching of 0 or more characters"
    like: String
    "Less than"
    lt: String
    "Less than or equal to"
    lteq: String
    "More than or equal to"
    moreq: String
    "Not equal to"
    neq: String
    "Not in. The value can contain a set of comma-separated values"
    nin: [String]
    "Not null"
    notnull: String
    "Is null"
    null: String
    "To. Must be used with 'from'"
    to: String
}

"""

A set of relative URLs that PayPal will use in response to various actions
during the authorization process. Magento prepends the base URL to this value to
create a full URL. For example, if the full URL is
https://www.example.com/path/to/page.html, the relative URL is
path/to/page.html. Use this input for Payments Pro Hosted Solution payment method.
"""
input MAGENTO_HostedProInput {
    """

    The relative URL of the page that PayPal will redirect to when the buyer
    cancels the transaction in order to choose a different payment method. If the
    full URL to this page is https://www.example.com/paypal/action/cancel.html,
    the relative URL is paypal/action/cancel.html.
    """
    cancel_url: String!
    """

    The relative URL of the final confirmation page that PayPal will redirect to
    upon payment success. If the full URL to this page is
    https://www.example.com/paypal/action/return.html, the relative URL is
    paypal/action/return.html.
    """
    return_url: String!
}

"The required input to request the secure URL for Payments Pro Hosted Solution payment."
input MAGENTO_HostedProUrlInput {
    "The unique ID that identifies the customer's cart"
    cart_id: String!
}

"Required input for Payflow Express Checkout payments"
input MAGENTO_PayflowExpressInput {
    "The unique ID of the PayPal user"
    payer_id: String!
    "The token returned by the createPaypalExpressToken mutation"
    token: String!
}

"""

A set of relative URLs that PayPal will use in response to various actions
during the authorization process. Magento prepends the base URL to this value to
create a full URL. For example, if the full URL is
https://www.example.com/path/to/page.html, the relative URL is
path/to/page.html. Use this input for Payflow Link and Payments Advanced payment methods.
"""
input MAGENTO_PayflowLinkInput {
    """

    The relative URL of the page that PayPal will redirect to when the buyer
    cancels the transaction in order to choose a different payment method. If the
    full URL to this page is https://www.example.com/paypal/action/cancel.html,
    the relative URL is paypal/action/cancel.html.
    """
    cancel_url: String!
    """

    The relative URL of the transaction error page that PayPal will redirect to
    upon payment error. If the full URL to this page is
    https://www.example.com/paypal/action/error.html, the relative URL is
    paypal/action/error.html.
    """
    error_url: String!
    """

    The relative URL of the order confirmation page that PayPal will redirect to
    when the payment is successful and additional confirmation is not needed. If
    the full URL to this page is
    https://www.example.com/paypal/action/return.html, the relative URL is
    paypal/action/return.html.
    """
    return_url: String!
}

"Input required to fetch payment token information for Payflow Link and Payments Advanced payment methods."
input MAGENTO_PayflowLinkTokenInput {
    "The unique ID that identifies the customer's cart"
    cart_id: String!
}

"Required input for Payflow Pro and Payments Pro payment methods."
input MAGENTO_PayflowProInput {
    "Required input for credit card related information"
    cc_details: MAGENTO_CreditCardDetailsInput!
}

"Input required to complete payment. Applies to Payflow Pro and Payments Pro payment methods."
input MAGENTO_PayflowProResponseInput {
    cart_id: String!
    paypal_payload: String!
}

"Input required to fetch payment token information for Payflow Pro and Payments Pro payment methods."
input MAGENTO_PayflowProTokenInput {
    "The unique ID that identifies the customer's cart"
    cart_id: String!
    "A set of relative URLs that PayPal uses for callback."
    urls: MAGENTO_PayflowProUrlInput!
}

"""

A set of relative URLs that PayPal will use in response to various actions
during the authorization process. Magento prepends the base URL to this value to
create a full URL. For example, if the full URL is
https://www.example.com/path/to/page.html, the relative URL is
path/to/page.html. Use this input for Payflow Pro and Payment Pro payment methods.
"""
input MAGENTO_PayflowProUrlInput {
    """

    The relative URL of the page that PayPal will redirect to when the buyer
    cancels the transaction in order to choose a different payment method. If the
    full URL to this page is https://www.example.com/paypal/action/cancel.html,
    the relative URL is paypal/action/cancel.html.
    """
    cancel_url: String!
    """

    The relative URL of the transaction error page that PayPal will redirect to
    upon payment error. If the full URL to this page is
    https://www.example.com/paypal/action/error.html, the relative URL is
    paypal/action/error.html.
    """
    error_url: String!
    """

    The relative URL of the final confirmation page that PayPal will redirect to
    upon payment success. If the full URL to this page is
    https://www.example.com/paypal/action/return.html, the relative URL is
    paypal/action/return.html.
    """
    return_url: String!
}

input MAGENTO_PaymentMethodInput {
    braintree: MAGENTO_BraintreeInput
    braintree_cc_vault: MAGENTO_BraintreeCcVaultInput
    "Payment method code"
    code: String!
    "Required input for PayPal Hosted pro payments"
    hosted_pro: MAGENTO_HostedProInput
    "Required input for Payflow Express Checkout payments"
    payflow_express: MAGENTO_PayflowExpressInput
    "Required input for PayPal Payflow Link and Payments Advanced payments"
    payflow_link: MAGENTO_PayflowLinkInput
    "Required input type for PayPal Payflow Pro and Payment Pro payments"
    payflowpro: MAGENTO_PayflowProInput
    "Required input for Express Checkout and Payments Standard payments"
    paypal_express: MAGENTO_PaypalExpressInput
    "Purchase order number"
    purchase_order_number: String
}

"Required input for Express Checkout and Payments Standard payments"
input MAGENTO_PaypalExpressInput {
    "The unique ID of the PayPal user"
    payer_id: String!
    "The token returned by the createPaypalExpressToken mutation"
    token: String!
}

"Defines the attributes required to receive a payment token for Express Checkout and Payments Standard payment methods."
input MAGENTO_PaypalExpressTokenInput {
    "The unique ID that identifies the customer's cart"
    cart_id: String!
    "Payment method code"
    code: String!
    "Indicates whether the buyer selected the quick checkout button. The default value is false"
    express_button: Boolean
    "A set of relative URLs that PayPal uses in response to various actions during the authorization process"
    urls: MAGENTO_PaypalExpressUrlsInput!
    "Indicates whether the buyer clicked the PayPal credit button. The default value is false"
    use_paypal_credit: Boolean
}

"""

A set of relative URLs that PayPal will use in response to various actions
during the authorization process. Magento prepends the base URL to this value to
create a full URL. For example, if the full URL is
https://www.example.com/path/to/page.html, the relative URL is
path/to/page.html. Use this input for Express Checkout and Payments Standard
payment methods.
"""
input MAGENTO_PaypalExpressUrlsInput {
    """

    The relative URL of the page that PayPal will redirect to when the buyer
    cancels the transaction in order to choose a different payment method. If the
    full URL to this page is https://www.example.com/paypal/action/cancel.html,
    the relative URL is paypal/action/cancel.html.
    """
    cancel_url: String!
    """

    The relative URL of the page that PayPal will redirect to when the payment has
    been put on hold for additional review. This condition mostly applies to ACH
    transactions, and is not applicable to most PayPal solutions. If the full URL
    to this page is https://www.example.com/paypal/action/success_pending.html,
    the relative URL is paypal/action/success_pending.html.
    """
    pending_url: String
    """

    The relative URL of the final confirmation page that PayPal will redirect to
    upon payment success. If the full URL to this page is
    https://www.example.com/paypal/action/return.html, the relative URL is
    paypal/action/return.html.
    """
    return_url: String!
    """

    The relative URL of the order confirmation page that PayPal will redirect to
    when the payment is successful and additional confirmation is not needed. Not
    applicable to most PayPal solutions. If the full URL to this page is
    https://www.example.com/paypal/action/success.html, the relative URL is
    paypal/action/success.html.
    """
    success_url: String
}

"PickupLocationFilterInput defines the list of attributes and filters for the search."
input MAGENTO_PickupLocationFilterInput {
    "Filter by city."
    city: MAGENTO_FilterTypeInput
    "Filter by country."
    country_id: MAGENTO_FilterTypeInput
    "Filter by pickup location name."
    name: MAGENTO_FilterTypeInput
    "Filter by pickup location code."
    pickup_location_code: MAGENTO_FilterTypeInput
    "Filter by postcode."
    postcode: MAGENTO_FilterTypeInput
    "Filter by region."
    region: MAGENTO_FilterTypeInput
    "Filter by region id."
    region_id: MAGENTO_FilterTypeInput
    "Filter by street."
    street: MAGENTO_FilterTypeInput
}

"""

PickupLocationSortInput specifies attribute to use for sorting search results
and indicates whether the results are sorted in ascending or descending order.
"""
input MAGENTO_PickupLocationSortInput {
    "City where pickup location is placed."
    city: MAGENTO_SortEnum
    "Name of the contact person."
    contact_name: MAGENTO_SortEnum
    "Id of the country in two letters."
    country_id: MAGENTO_SortEnum
    "Description of the pickup location."
    description: MAGENTO_SortEnum
    """

    Distance to the address, requested by distance filter. Applicable only with
    distance filter. If distance sort order is present, all other sort orders will be ignored.
    """
    distance: MAGENTO_SortEnum
    "Contact email of the pickup location."
    email: MAGENTO_SortEnum
    "Contact fax of the pickup location."
    fax: MAGENTO_SortEnum
    "Geographic latitude where pickup location is placed."
    latitude: MAGENTO_SortEnum
    "Geographic longitude where pickup location is placed."
    longitude: MAGENTO_SortEnum
    "The pickup location name. Customer use this to identify the pickup location."
    name: MAGENTO_SortEnum
    "Contact phone number of the pickup location."
    phone: MAGENTO_SortEnum
    "A code assigned to pickup location to identify the source."
    pickup_location_code: MAGENTO_SortEnum
    "Postcode where pickup location is placed."
    postcode: MAGENTO_SortEnum
    "Name of the region."
    region: MAGENTO_SortEnum
    "Id of the region."
    region_id: MAGENTO_SortEnum
    "Street where pickup location is placed."
    street: MAGENTO_SortEnum
}

input MAGENTO_PlaceOrderInput {
    cart_id: String!
}

"""

ProductAttributeFilterInput defines the filters to be used in the search. A
filter contains at least one attribute, a comparison operator, and the value
that is being searched for.
"""
input MAGENTO_ProductAttributeFilterInput {
    "Attribute label: Activity"
    activity: MAGENTO_FilterEqualTypeInput
    "Attribute label: Category Gear"
    category_gear: MAGENTO_FilterEqualTypeInput
    "Filter product by category id"
    category_id: MAGENTO_FilterEqualTypeInput
    "Attribute label: Climate"
    climate: MAGENTO_FilterEqualTypeInput
    "Attribute label: Collar"
    collar: MAGENTO_FilterEqualTypeInput
    "Attribute label: Color"
    color: MAGENTO_FilterEqualTypeInput
    "Attribute label: Description"
    description: MAGENTO_FilterMatchTypeInput
    "Attribute label: Eco Collection"
    eco_collection: MAGENTO_FilterEqualTypeInput
    "Attribute label: Erin Recommends"
    erin_recommends: MAGENTO_FilterEqualTypeInput
    "Attribute label: Features"
    features_bags: MAGENTO_FilterEqualTypeInput
    "Attribute label: Format"
    format: MAGENTO_FilterEqualTypeInput
    "Attribute label: Gender"
    gender: MAGENTO_FilterEqualTypeInput
    "Attribute label: Material"
    material: MAGENTO_FilterEqualTypeInput
    "Attribute label: Product Name"
    name: MAGENTO_FilterMatchTypeInput
    "Attribute label: New"
    new: MAGENTO_FilterEqualTypeInput
    "Attribute label: Pattern"
    pattern: MAGENTO_FilterEqualTypeInput
    "Attribute label: Performance Fabric"
    performance_fabric: MAGENTO_FilterEqualTypeInput
    "Attribute label: Price"
    price: MAGENTO_FilterRangeTypeInput
    "Attribute label: Sale"
    sale: MAGENTO_FilterEqualTypeInput
    "Attribute label: Short Description"
    short_description: MAGENTO_FilterMatchTypeInput
    "Attribute label: Size"
    size: MAGENTO_FilterEqualTypeInput
    "Attribute label: SKU"
    sku: MAGENTO_FilterEqualTypeInput
    "Attribute label: Sleeve"
    sleeve: MAGENTO_FilterEqualTypeInput
    "Attribute label: Strap/Handle"
    strap_bags: MAGENTO_FilterEqualTypeInput
    "Attribute label: Style Bags"
    style_bags: MAGENTO_FilterEqualTypeInput
    "Attribute label: Style Bottom"
    style_bottom: MAGENTO_FilterEqualTypeInput
    "Attribute label: Style General"
    style_general: MAGENTO_FilterEqualTypeInput
    "The part of the URL that identifies the product"
    url_key: MAGENTO_FilterEqualTypeInput
}

"""

ProductAttributeSortInput specifies the attribute to use for sorting search
results and indicates whether the results are sorted in ascending or descending
order. It's possible to sort products using searchable attributes with enabled
'Use in Filter Options' option
"""
input MAGENTO_ProductAttributeSortInput {
    "Attribute label: Product Name"
    name: MAGENTO_SortEnum
    "Sort by the position assigned to each product."
    position: MAGENTO_SortEnum
    "Attribute label: Price"
    price: MAGENTO_SortEnum
    "Sort by the search relevance score (default)."
    relevance: MAGENTO_SortEnum
}

"""

ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead.
ProductFilterInput defines the filters to be used in the search. A filter
contains at least one attribute, a comparison operator, and the value that is
being searched for.
"""
input MAGENTO_ProductFilterInput {
    "Category ID the product belongs to."
    category_id: MAGENTO_FilterTypeInput
    "The product's country of origin."
    country_of_manufacture: MAGENTO_FilterTypeInput
    "Timestamp indicating when the product was created."
    created_at: MAGENTO_FilterTypeInput
    "The name of a custom layout."
    custom_layout: MAGENTO_FilterTypeInput
    "XML code that is applied as a layout update to the product page."
    custom_layout_update: MAGENTO_FilterTypeInput
    "Detailed information about the product. The value can include simple HTML tags."
    description: MAGENTO_FilterTypeInput
    "Indicates whether a gift message is available."
    gift_message_available: MAGENTO_FilterTypeInput
    "Indicates whether additional attributes have been created for the product."
    has_options: MAGENTO_FilterTypeInput
    "The relative path to the main image on the product page."
    image: MAGENTO_FilterTypeInput
    "The label assigned to a product image."
    image_label: MAGENTO_FilterTypeInput
    "A number representing the product's manufacturer."
    manufacturer: MAGENTO_FilterTypeInput
    "The numeric maximal price of the product. Do not include the currency code."
    max_price: MAGENTO_FilterTypeInput
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: MAGENTO_FilterTypeInput
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: MAGENTO_FilterTypeInput
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: MAGENTO_FilterTypeInput
    "The numeric minimal price of the product. Do not include the currency code."
    min_price: MAGENTO_FilterTypeInput
    "The product name. Customers use this name to identify the product."
    name: MAGENTO_FilterTypeInput
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    news_from_date: MAGENTO_FilterTypeInput
    "The end date for new product listings."
    news_to_date: MAGENTO_FilterTypeInput
    "If the product has multiple options, determines where they appear on the product page."
    options_container: MAGENTO_FilterTypeInput
    "The keyword required to perform a logical OR comparison."
    or: MAGENTO_ProductFilterInput
    "The price of an item."
    price: MAGENTO_FilterTypeInput
    "Indicates whether the product has required options."
    required_options: MAGENTO_FilterTypeInput
    "A short description of the product. Its use depends on the theme."
    short_description: MAGENTO_FilterTypeInput
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: MAGENTO_FilterTypeInput
    "The relative path to the small image, which is used on catalog pages."
    small_image: MAGENTO_FilterTypeInput
    "The label assigned to a product's small image."
    small_image_label: MAGENTO_FilterTypeInput
    "The beginning date that a product has a special price."
    special_from_date: MAGENTO_FilterTypeInput
    "The discounted price of the product. Do not include the currency code."
    special_price: MAGENTO_FilterTypeInput
    "The end date that a product has a special price."
    special_to_date: MAGENTO_FilterTypeInput
    "The file name of a swatch image"
    swatch_image: MAGENTO_FilterTypeInput
    "The relative path to the product's thumbnail image."
    thumbnail: MAGENTO_FilterTypeInput
    "The label assigned to a product's thumbnail image."
    thumbnail_label: MAGENTO_FilterTypeInput
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: MAGENTO_FilterTypeInput
    "Timestamp indicating when the product was updated."
    updated_at: MAGENTO_FilterTypeInput
    "The part of the URL that identifies the product"
    url_key: MAGENTO_FilterTypeInput
    url_path: MAGENTO_FilterTypeInput
    "The weight of the item, in units defined by the store."
    weight: MAGENTO_FilterTypeInput
}

"""

ProductSortInput is deprecated, use @ProductAttributeSortInput instead.
ProductSortInput specifies the attribute to use for sorting search results and
indicates whether the results are sorted in ascending or descending order.
"""
input MAGENTO_ProductSortInput {
    "The product's country of origin."
    country_of_manufacture: MAGENTO_SortEnum
    "Timestamp indicating when the product was created."
    created_at: MAGENTO_SortEnum
    "The name of a custom layout."
    custom_layout: MAGENTO_SortEnum
    "XML code that is applied as a layout update to the product page."
    custom_layout_update: MAGENTO_SortEnum
    "Detailed information about the product. The value can include simple HTML tags."
    description: MAGENTO_SortEnum
    "Indicates whether a gift message is available."
    gift_message_available: MAGENTO_SortEnum
    "Indicates whether additional attributes have been created for the product."
    has_options: MAGENTO_SortEnum
    "The relative path to the main image on the product page."
    image: MAGENTO_SortEnum
    "The label assigned to a product image."
    image_label: MAGENTO_SortEnum
    "A number representing the product's manufacturer."
    manufacturer: MAGENTO_SortEnum
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: MAGENTO_SortEnum
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: MAGENTO_SortEnum
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: MAGENTO_SortEnum
    "The product name. Customers use this name to identify the product."
    name: MAGENTO_SortEnum
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    news_from_date: MAGENTO_SortEnum
    "The end date for new product listings."
    news_to_date: MAGENTO_SortEnum
    "If the product has multiple options, determines where they appear on the product page."
    options_container: MAGENTO_SortEnum
    "The price of the item."
    price: MAGENTO_SortEnum
    "Indicates whether the product has required options."
    required_options: MAGENTO_SortEnum
    "A short description of the product. Its use depends on the theme."
    short_description: MAGENTO_SortEnum
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: MAGENTO_SortEnum
    "The relative path to the small image, which is used on catalog pages."
    small_image: MAGENTO_SortEnum
    "The label assigned to a product's small image."
    small_image_label: MAGENTO_SortEnum
    "The beginning date that a product has a special price."
    special_from_date: MAGENTO_SortEnum
    "The discounted price of the product."
    special_price: MAGENTO_SortEnum
    "The end date that a product has a special price."
    special_to_date: MAGENTO_SortEnum
    "The file name of a swatch image"
    swatch_image: MAGENTO_SortEnum
    "The relative path to the product's thumbnail image."
    thumbnail: MAGENTO_SortEnum
    "The label assigned to a product's thumbnail image."
    thumbnail_label: MAGENTO_SortEnum
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: MAGENTO_SortEnum
    "Timestamp indicating when the product was updated."
    updated_at: MAGENTO_SortEnum
    "The part of the URL that identifies the product"
    url_key: MAGENTO_SortEnum
    url_path: MAGENTO_SortEnum
    "The weight of the item, in units defined by the store."
    weight: MAGENTO_SortEnum
}

input MAGENTO_RemoveCouponFromCartInput {
    cart_id: String!
}

input MAGENTO_RemoveItemFromCartInput {
    cart_id: String!
    cart_item_id: Int!
}

input MAGENTO_SendEmailToFriendInput {
    product_id: Int!
    recipients: [MAGENTO_SendEmailToFriendRecipientInput]!
    sender: MAGENTO_SendEmailToFriendSenderInput!
}

input MAGENTO_SendEmailToFriendRecipientInput {
    email: String!
    name: String!
}

input MAGENTO_SendEmailToFriendSenderInput {
    email: String!
    message: String!
    name: String!
}

input MAGENTO_SetBillingAddressOnCartInput {
    billing_address: MAGENTO_BillingAddressInput!
    cart_id: String!
}

input MAGENTO_SetGuestEmailOnCartInput {
    cart_id: String!
    email: String!
}

input MAGENTO_SetPaymentMethodAndPlaceOrderInput {
    cart_id: String!
    payment_method: MAGENTO_PaymentMethodInput!
}

input MAGENTO_SetPaymentMethodOnCartInput {
    cart_id: String!
    payment_method: MAGENTO_PaymentMethodInput!
}

input MAGENTO_SetShippingAddressesOnCartInput {
    cart_id: String!
    shipping_addresses: [MAGENTO_ShippingAddressInput]!
}

input MAGENTO_SetShippingMethodsOnCartInput {
    cart_id: String!
    shipping_methods: [MAGENTO_ShippingMethodInput]!
}

input MAGENTO_ShippingAddressInput {
    address: MAGENTO_CartAddressInput
    customer_address_id: Int
    customer_notes: String
    "The code of Pickup Location which will be used for In-Store Pickup."
    pickup_location_code: String
}

input MAGENTO_ShippingMethodInput {
    carrier_code: String!
    method_code: String!
}

input MAGENTO_SimpleProductCartItemInput {
    customizable_options: [MAGENTO_CustomizableOptionInput]
    data: MAGENTO_CartItemInput!
}

input MAGENTO_UpdateCartItemsInput {
    cart_id: String!
    cart_items: [MAGENTO_CartItemUpdateInput]!
}

input MAGENTO_VirtualProductCartItemInput {
    customizable_options: [MAGENTO_CustomizableOptionInput]
    data: MAGENTO_CartItemInput!
}

input MAGENTO_createEmptyCartInput {
    cart_id: String
}

input NodeFilterInput {
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input NodeFilterListInput {
    elemMatch: NodeFilterInput
}

input Potrace {
    alphaMax: Float
    background: String
    blackOnWhite: Boolean
    color: String
    optCurve: Boolean
    optTolerance: Float
    threshold: Int
    turdSize: Float
    turnPolicy: PotraceTurnPolicy
}

input SiteBuildMetadataFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input SiteBuildMetadataSortInput {
    fields: [SiteBuildMetadataFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    host: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    pathPrefix: StringQueryOperatorInput
    polyfill: BooleanQueryOperatorInput
    port: IntQueryOperatorInput
    siteMetadata: SiteSiteMetadataFilterInput
}

input SitePageFilterInput {
    children: NodeFilterListInput
    component: StringQueryOperatorInput
    componentChunkName: StringQueryOperatorInput
    componentPath: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    internalComponentName: StringQueryOperatorInput
    isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
    matchPath: StringQueryOperatorInput
    parent: NodeFilterInput
    path: StringQueryOperatorInput
    pluginCreator: SitePluginFilterInput
    pluginCreatorId: StringQueryOperatorInput
}

input SitePageSortInput {
    fields: [SitePageFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SitePluginFilterInput {
    browserAPIs: StringQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    name: StringQueryOperatorInput
    nodeAPIs: StringQueryOperatorInput
    packageJson: SitePluginPackageJsonFilterInput
    parent: NodeFilterInput
    pluginFilepath: StringQueryOperatorInput
    pluginOptions: SitePluginPluginOptionsFilterInput
    resolve: StringQueryOperatorInput
    ssrAPIs: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

input SitePluginPackageJsonDevDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonFilterInput {
    dependencies: SitePluginPackageJsonDependenciesFilterListInput
    description: StringQueryOperatorInput
    devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
    keywords: StringQueryOperatorInput
    license: StringQueryOperatorInput
    main: StringQueryOperatorInput
    name: StringQueryOperatorInput
    peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

input SitePluginPluginOptionsFilterInput {
    allExtensions: BooleanQueryOperatorInput
    background_color: StringQueryOperatorInput
    cacheDigest: StringQueryOperatorInput
    cache_busting_mode: StringQueryOperatorInput
    display: StringQueryOperatorInput
    fieldName: StringQueryOperatorInput
    icon: StringQueryOperatorInput
    include_favicon: BooleanQueryOperatorInput
    isTSX: BooleanQueryOperatorInput
    jsxPragma: StringQueryOperatorInput
    legacy: BooleanQueryOperatorInput
    name: StringQueryOperatorInput
    path: StringQueryOperatorInput
    pathCheck: BooleanQueryOperatorInput
    short_name: StringQueryOperatorInput
    start_url: StringQueryOperatorInput
    theme_color: StringQueryOperatorInput
    theme_color_in_head: BooleanQueryOperatorInput
    typeName: StringQueryOperatorInput
    url: StringQueryOperatorInput
}

input SitePluginSortInput {
    fields: [SitePluginFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteSiteMetadataFilterInput {
    author: StringQueryOperatorInput
    description: StringQueryOperatorInput
    title: StringQueryOperatorInput
}

input SiteSortInput {
    fields: [SiteFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StringQueryOperatorInput {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}


"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON